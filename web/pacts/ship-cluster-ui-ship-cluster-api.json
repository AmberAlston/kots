{
  "consumer": {
    "name": "ship-cluster-ui"
  },
  "provider": {
    "name": "ship-cluster-api"
  },
  "interactions": [
    {
      "description": "a query to list clusters for solo account",
      "request": {
        "method": "POST",
        "path": "/graphql",
        "headers": {
          "Authorization": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpYXQiOjE1NDYzMDQ0MDAwMDAsInRva2VuIjoibm90LWNoZWNrZWQiLCJzZXNzaW9uSWQiOiJzb2xvLWFjY291bnQtc2Vzc2lvbi0xIn0.pC3xMQDD5zseVcOVzypZkC9ZyngBoT_nLymZTbJTHdA",
          "Content-Type": "application/json"
        },
        "body": {
          "operationName": "listClusters",
          "query": "\n  query listClusters {\n    listClusters {\n      id\n      title\n      slug\n      createdOn\n      lastUpdated\n      gitOpsRef {\n        owner\n        repo\n        branch\n      }\n      shipOpsRef {\n        token\n      }\n      totalApplicationCount\n    }\n  }\n",
          "variables": {
          }
        },
        "matchingRules": {
          "$.body.query": {
            "match": "regex",
            "regex": "\\s*query\\s*listClusters\\s*\\{\\s*listClusters\\s*\\{\\s*id\\s*title\\s*slug\\s*createdOn\\s*lastUpdated\\s*gitOpsRef\\s*\\{\\s*owner\\s*repo\\s*branch\\s*\\}\\s*shipOpsRef\\s*\\{\\s*token\\s*\\}\\s*totalApplicationCount\\s*\\}\\s*\\}\\s*"
          }
        }
      },
      "response": {
        "status": 200,
        "headers": {
          "Content-Type": "application/json"
        },
        "body": {
          "data": {
            "listClusters": [
              {
                "id": "solo-account-cluster-1",
                "title": "Solo Cluster",
                "slug": "solo-cluster",
                "totalApplicationCount": 1,
                "createdOn": "2019-04-10 12:34:56.789",
                "lastUpdated": "2019-04-11 01:23:45.567",
                "gitOpsRef": null,
                "shipOpsRef": {
                  "token": "solo-account-cluster-token"
                }
              },
              {
                "id": "solo-account-cluster-2",
                "title": "Solo GitHub Cluster",
                "slug": "solo-cluster-2",
                "totalApplicationCount": 0,
                "createdOn": "2019-04-10 12:34:56.789",
                "lastUpdated": "2019-04-11 01:23:45.567",
                "gitOpsRef": {
                  "owner": "lonely-github-dev",
                  "repo": "gitops-deploy",
                  "branch": "master"
                },
                "shipOpsRef": null
              }
            ]
          }
        },
        "matchingRules": {
          "$.body.data.listClusters[0].createdOn": {
            "match": "type"
          },
          "$.body.data.listClusters[0].lastUpdated": {
            "match": "type"
          },
          "$.body.data.listClusters[1].createdOn": {
            "match": "type"
          },
          "$.body.data.listClusters[1].lastUpdated": {
            "match": "type"
          }
        }
      }
    },
    {
      "description": "a mutation to create a ship cluster for solo dev",
      "request": {
        "method": "POST",
        "path": "/graphql",
        "headers": {
          "Authorization": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpYXQiOjE1NDYzMDQ0MDAwMDAsInRva2VuIjoibm90LWNoZWNrZWQiLCJzZXNzaW9uSWQiOiJzb2xvLWFjY291bnQtc2Vzc2lvbi0xIn0.pC3xMQDD5zseVcOVzypZkC9ZyngBoT_nLymZTbJTHdA",
          "Content-Type": "application/json"
        },
        "body": {
          "operationName": "createShipOpsCluster",
          "query": "\n  mutation createShipOpsCluster($title: String!) {\n    createShipOpsCluster(title: $title) {\n      id\n      slug\n      shipOpsRef {\n        token\n      }\n    }\n  }\n",
          "variables": {
            "title": "FooBarBaz Cluster"
          }
        },
        "matchingRules": {
          "$.body.query": {
            "match": "regex",
            "regex": "\\s*mutation\\s*createShipOpsCluster\\(\\$title:\\s*String!\\)\\s*\\{\\s*createShipOpsCluster\\(title:\\s*\\$title\\)\\s*\\{\\s*id\\s*slug\\s*shipOpsRef\\s*\\{\\s*token\\s*\\}\\s*\\}\\s*\\}\\s*"
          }
        }
      },
      "response": {
        "status": 200,
        "headers": {
          "Content-Type": "application/json"
        },
        "body": {
          "data": {
            "createShipOpsCluster": {
              "id": "generated",
              "slug": "foobarbaz-cluster",
              "shipOpsRef": {
                "token": "generated"
              }
            }
          }
        },
        "matchingRules": {
          "$.body.data.createShipOpsCluster.id": {
            "match": "type"
          },
          "$.body.data.createShipOpsCluster.shipOpsRef.token": {
            "match": "type"
          }
        }
      }
    },
    {
      "description": "a mutation to create a gitops cluster for solo dev",
      "request": {
        "method": "POST",
        "path": "/graphql",
        "headers": {
          "Authorization": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpYXQiOjE1NDYzMDQ0MDAwMDAsInRva2VuIjoibm90LWNoZWNrZWQiLCJzZXNzaW9uSWQiOiJzb2xvLWFjY291bnQtc2Vzc2lvbi0xIn0.pC3xMQDD5zseVcOVzypZkC9ZyngBoT_nLymZTbJTHdA",
          "Content-Type": "application/json"
        },
        "body": {
          "operationName": "createGitOpsCluster",
          "query": "\n  mutation createGitOpsCluster($title: String!, $installationId: Int, $gitOpsRef: GitOpsRefInput) {\n    createGitOpsCluster(title: $title, installationId: $installationId, gitOpsRef: $gitOpsRef) {\n      id\n      slug\n    }\n  }\n",
          "variables": {
            "title": "FooBarGit Cluster",
            "installationId": 987654,
            "gitOpsRef": {
              "owner": "me",
              "repo": "myself",
              "branch": "i"
            }
          }
        },
        "matchingRules": {
          "$.body.query": {
            "match": "regex",
            "regex": "\\s*mutation\\s*createGitOpsCluster\\(\\$title:\\s*String!,\\s*\\$installationId:\\s*Int,\\s*\\$gitOpsRef:\\s*GitOpsRefInput\\)\\s*\\{\\s*createGitOpsCluster\\(title:\\s*\\$title,\\s*installationId:\\s*\\$installationId,\\s*gitOpsRef:\\s*\\$gitOpsRef\\)\\s*\\{\\s*id\\s*slug\\s*\\}\\s*\\}\\s*"
          }
        }
      },
      "response": {
        "status": 200,
        "headers": {
          "Content-Type": "application/json"
        },
        "body": {
          "data": {
            "createGitOpsCluster": {
              "id": "generated",
              "slug": "foobargit-cluster"
            }
          }
        },
        "matchingRules": {
          "$.body.data.createGitOpsCluster.id": {
            "match": "type"
          }
        }
      }
    },
    {
      "description": "a mutation to create a midstream watch for solo dev",
      "request": {
        "method": "POST",
        "path": "/graphql",
        "headers": {
          "Authorization": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpYXQiOjE1NDYzMDQ0MDAwMDAsInRva2VuIjoibm90LWNoZWNrZWQiLCJzZXNzaW9uSWQiOiJzb2xvLWFjY291bnQtc2Vzc2lvbi0xIn0.pC3xMQDD5zseVcOVzypZkC9ZyngBoT_nLymZTbJTHdA",
          "Content-Type": "application/json"
        },
        "body": {
          "operationName": "createWatch",
          "query": "\n  mutation createWatch($stateJSON: String!, $owner: String!) {\n    createWatch(stateJSON: $stateJSON, owner: $owner) {\n      id\n      slug\n      watchName\n      createdOn\n      lastUpdated\n    }\n  }\n",
          "variables": {
            "owner": "solo-account",
            "stateJSON": "{\n  \"v1\": {\n    \"config\": {},\n    \"releaseName\": \"factorio\",\n    \"helmValuesDefaults\": \"\",\n    \"upstream\": \"https://github.com/helm/charts/tree/ffb84f85a861e765caade879491a75a6dd3091a5/stable/factorio\",\n    \"metadata\": {\n      \"applicationType\": \"helm\",\n      \"icon\": \"https://us1.factorio.com/assets/img/factorio-logo.png\",\n      \"name\": \"factorio\",\n      \"releaseNotes\": \"\",\n      \"license\": {\n        \"assignee\": \"\",\n        \"createdAt\": \"0001-01-01T00:00:00Z\",\n        \"expiresAt\": \"0001-01-01T00:00:00Z\",\n        \"id\": \"\",\n        \"type\": \"\"\n      },\n      \"sequence\": 0,\n      \"version\": \"0.3.1\"\n    },\n    \"contentSHA\": \"126fa6eb8f09171050751c65a386f41aef4fe9ebe00c8b1e66f2c4e60319ec4e\"\n  }\n}"
          }
        },
        "matchingRules": {
          "$.body.query": {
            "match": "regex",
            "regex": "\\s*mutation\\s*createWatch\\(\\$stateJSON:\\s*String!,\\s*\\$owner:\\s*String!\\)\\s*\\{\\s*createWatch\\(stateJSON:\\s*\\$stateJSON,\\s*owner:\\s*\\$owner\\)\\s*\\{\\s*id\\s*slug\\s*watchName\\s*createdOn\\s*lastUpdated\\s*\\}\\s*\\}\\s*"
          }
        }
      },
      "response": {
        "status": 200,
        "headers": {
          "Content-Type": "application/json"
        },
        "body": {
          "data": {
            "createWatch": {
              "id": "generated",
              "slug": "generated",
              "watchName": "generated",
              "createdOn": "generated",
              "lastUpdated": null
            }
          }
        },
        "matchingRules": {
          "$.body.data.createWatch.id": {
            "match": "type"
          },
          "$.body.data.createWatch.slug": {
            "match": "type"
          },
          "$.body.data.createWatch.watchName": {
            "match": "type"
          },
          "$.body.data.createWatch.createdOn": {
            "match": "type"
          }
        }
      }
    },
    {
      "description": "a mutation to create a helm init session",
      "request": {
        "method": "POST",
        "path": "/graphql",
        "headers": {
          "Authorization": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpYXQiOjE1NDYzMDQ0MDAwMDAsInRva2VuIjoibm90LWNoZWNrZWQiLCJzZXNzaW9uSWQiOiJzb2xvLWFjY291bnQtc2Vzc2lvbi0xIn0.pC3xMQDD5zseVcOVzypZkC9ZyngBoT_nLymZTbJTHdA",
          "Content-Type": "application/json"
        },
        "body": {
          "operationName": "createInitSession",
          "query": "\n  mutation createInitSession($upstreamUri: String!, $clusterID: String, $githubPath: String) {\n    createInitSession(upstreamUri: $upstreamUri, clusterID: $clusterID, githubPath: $githubPath) {\n      id\n      upstreamUri\n      createdOn\n      finishedOn\n      result\n    }\n  }\n",
          "variables": {
            "upstreamUri": "https://github.com/helm/charts/stable/grafana",
            "clusterID": null,
            "githubPath": null
          }
        },
        "matchingRules": {
          "$.body.query": {
            "match": "regex",
            "regex": "\\s*mutation\\s*createInitSession\\(\\$upstreamUri:\\s*String!,\\s*\\$clusterID:\\s*String,\\s*\\$githubPath:\\s*String\\)\\s*\\{\\s*createInitSession\\(upstreamUri:\\s*\\$upstreamUri,\\s*clusterID:\\s*\\$clusterID,\\s*githubPath:\\s*\\$githubPath\\)\\s*\\{\\s*id\\s*upstreamUri\\s*createdOn\\s*finishedOn\\s*result\\s*\\}\\s*\\}\\s*"
          }
        }
      },
      "response": {
        "status": 200,
        "headers": {
          "Content-Type": "application/json"
        },
        "body": {
          "data": {
            "createInitSession": {
              "id": "generated",
              "upstreamUri": "https://github.com/helm/charts/stable/grafana",
              "createdOn": "generated",
              "finishedOn": null,
              "result": null
            }
          }
        },
        "matchingRules": {
          "$.body.data.createInitSession.id": {
            "match": "type"
          },
          "$.body.data.createInitSession.createdOn": {
            "match": "type"
          }
        }
      }
    },
    {
      "description": "a query to get a single watch version for solo account",
      "request": {
        "method": "POST",
        "path": "/graphql",
        "headers": {
          "Authorization": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpYXQiOjE1NDYzMDQ0MDAwMDAsInRva2VuIjoibm90LWNoZWNrZWQiLCJzZXNzaW9uSWQiOiJzb2xvLWFjY291bnQtc2Vzc2lvbi0xIn0.pC3xMQDD5zseVcOVzypZkC9ZyngBoT_nLymZTbJTHdA",
          "Content-Type": "application/json"
        },
        "body": {
          "operationName": "getWatchVersion",
          "query": "\n  query getWatchVersion($id: String!, $sequence: Int) {\n    getWatchVersion(id: $id, sequence: $sequence) {\n      title\n      status\n      createdOn\n      sequence\n      pullrequestNumber\n      rendered\n    }\n  }\n",
          "variables": {
            "id": "solo-account-watch-1",
            "sequence": 0
          }
        },
        "matchingRules": {
          "$.body.query": {
            "match": "regex",
            "regex": "\\s*query\\s*getWatchVersion\\(\\$id:\\s*String!,\\s*\\$sequence:\\s*Int\\)\\s*\\{\\s*getWatchVersion\\(id:\\s*\\$id,\\s*sequence:\\s*\\$sequence\\)\\s*\\{\\s*title\\s*status\\s*createdOn\\s*sequence\\s*pullrequestNumber\\s*rendered\\s*\\}\\s*\\}\\s*"
          }
        }
      },
      "response": {
        "status": 200,
        "headers": {
          "Content-Type": "application/json"
        },
        "body": {
          "data": {
            "getWatchVersion": {
              "title": "string",
              "status": "deployed",
              "createdOn": "2019-04-10 12:34:56.789",
              "sequence": 0,
              "pullrequestNumber": null,
              "rendered": "apiVersion: v1\ndata:\n  factorio-password: eW91ci5wYXNzd29yZA==\n  factorio-username: eW91ci51c2VybmFtZQ==\n  rcon-password: \"\"\n  server-password: \"\"\nkind: Secret\nmetadata:\n labels:\n    app: factorio-factorio\n    release: factorio\n  name: factorio-factorio\ntype: Opaque\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: factorio-factorio\n    release: factorio\n  name: factorio-factorio\nspec:\n  ports:\n  - name: factorio\n    port: 34197\n    protocol: UDP\ntargetPort: factorio\n  selector:\n    app: factorio-factorio\n  type: LoadBalancer\n---\napiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  labels:\n    app: factorio-factorio\n    release: factorio\n  name: factorio-factorio\nspec:\n  template:\n    metadata:\n      labels:\n        app: factorio-factorio\n    spec:\n      containers:\n      - env:\n        - name: FACTORIO_SERVER_NAME\n          value: Kubernetes Server\n        - name: FACTORIO_DESCRIPTION\n          value: Factorio running on Kubernetes\n        - name: FACTORIO_PORT\n          value: \"34197\"\n        - name: FACTORIO_MAX_PLAYERS\n    value: \"255\"\n        - name: FACTORIO_IS_PUBLIC\n          value: \"false\"\n        - name: FACTORIO_REQUIRE_USER_VERIFICATION\n          value: \"false\"\n        - name: FACTORIO_ALLOW_COMMANDS\n          value: admins-only\n        - name: FACTORIO_NO_AUTO_PAUSE\n          value: \"false\"\n        - name: FACTORIO_AUTOSAVE_INTERVAL\nvalue: \"2\"\n        - name: FACTORIO_AUTOSAVE_SLOTS\n          value: \"3\"\n        image: quay.io/games_on_k8s/factorio:0.14.22\n        imagePullPolicy: Always\n        name: factorio-factorio\n        ports:\n        - containerPort: 34197\n          name: factorio\n          protocol: UDP\n        resources:\n          requests:\n            cpu: 500m\n            memory: 512Mi\n        volumeMounts:\n- mountPath: /opt/factorio/saves\n          name: saves\n        - mountPath: /opt/factorio/mods\n   name: mods\n      volumes:\n      - name: saves\n        persistentVolumeClaim:\n          claimName:factorio-factorio-savedgames\n      - emptyDir: {}\n        name: mods\n---\napiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  labels:\n    app: factorio-factorio\n    release: factorio\n  name: factorio-factorio-savedgames\nspec:\n  accessModes:\n  - ReadWriteOnce\n  resources:\n    requests:\n      storage: 1Gi\n"
            }
          }
        },
        "matchingRules": {
          "$.body.data.getWatchVersion.title": {
            "match": "type"
          },
          "$.body.data.getWatchVersion.createdOn": {
            "match": "type"
          },
          "$.body.data.getWatchVersion.rendered": {
            "match": "type"
          }
        }
      }
    },
    {
      "description": "a query to list image watches from a cluster for solo account",
      "request": {
        "method": "POST",
        "path": "/graphql",
        "headers": {
          "Authorization": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpYXQiOjE1NDYzMDQ0MDAwMDAsInRva2VuIjoibm90LWNoZWNrZWQiLCJzZXNzaW9uSWQiOiJzb2xvLWFjY291bnQtc2Vzc2lvbi0xIn0.pC3xMQDD5zseVcOVzypZkC9ZyngBoT_nLymZTbJTHdA",
          "Content-Type": "application/json"
        },
        "body": {
          "operationName": "imageWatchItems",
          "query": "\n  query imageWatchItems($batchId: String!) {\n    imageWatchItems(batchId: $batchId) {\n      id\n      name\n      lastCheckedOn\n      isPrivate\n      versionDetected\n      latestVersion\n      compatibleVersion\n      versionsBehind\n      path\n    }\n  }\n",
          "variables": {
            "batchId": "solo-account-image-batch-watch-1"
          }
        },
        "matchingRules": {
          "$.body.query": {
            "match": "regex",
            "regex": "\\s*query\\s*imageWatchItems\\(\\$batchId:\\s*String!\\)\\s*\\{\\s*imageWatchItems\\(batchId:\\s*\\$batchId\\)\\s*\\{\\s*id\\s*name\\s*lastCheckedOn\\s*isPrivate\\s*versionDetected\\s*latestVersion\\s*compatibleVersion\\s*versionsBehind\\s*path\\s*\\}\\s*\\}\\s*"
          }
        }
      },
      "response": {
        "status": 200,
        "headers": {
          "Content-Type": "application/json"
        },
        "body": {
          "data": {
            "imageWatchItems": [
              {
                "id": "solo-account-image-watch-1",
                "name": "postgres:10.7,docker-pullable://postgres@sha256:810537dac6e7420c72a23b043b5dfe3ab493808e211f4ce69f7d1b7da1717cee",
                "lastCheckedOn": "Tue May 07 2019 22:43:05 GMT+0000 (UTC)",
                "isPrivate": false,
                "versionDetected": "10.7",
                "latestVersion": "11.2.0",
                "compatibleVersion": "",
                "versionsBehind": 3,
                "path": "[{\"sort\":3,\"version\":\"11.2\",\"date\":\"2019-04-25T00:27:55.227279355Z\"},{\"sort\":2,\"version\":\"11.1\",\"date\":\"2019-02-06T08:16:44.722701909Z\"},{\"sort\":1,\"version\":\"11.0\",\"date\":\"2018-10-18T23:39:51.864511929Z\"},{\"sort\":0,\"version\":\"10.7\",\"date\":\"2019-04-25T00:28:05.286902175Z\"}]"
              },
              {
                "id": "solo-account-image-watch-2",
                "name": "quay.io/kubernetes-ingress-controller/nginx-ingress-controller-amd64:0.22.0",
                "lastCheckedOn": "Tue May 07 2019 22:43:05 GMT+0000 (UTC)",
                "isPrivate": false,
                "versionDetected": "0.22.0",
                "latestVersion": "",
                "compatibleVersion": "",
                "versionsBehind": 0,
                "path": ""
              },
              {
                "id": "solo-account-image-watch-3",
                "name": "localhost:32000/ship-cluster-worker:c7d3ee4@sha256:3af0e0a451dbc4c8a6d541e94ebbac59612f1c2fba7fec5a61f7dfc5ed9f343e",
                "lastCheckedOn": "Tue May 07 2019 22:43:05 GMT+0000 (UTC)",
                "isPrivate": true,
                "versionDetected": "c7d3ee4@sha256:3af0e0a451dbc4c8a6d541e94ebbac59612f1c2fba7fec5a61f7dfc5ed9f343e",
                "latestVersion": "",
                "compatibleVersion": "",
                "versionsBehind": 0,
                "path": ""
              }
            ]
          }
        },
        "matchingRules": {
          "$.body.data.imageWatchItems[0].lastCheckedOn": {
            "match": "type"
          },
          "$.body.data.imageWatchItems[1].lastCheckedOn": {
            "match": "type"
          },
          "$.body.data.imageWatchItems[2].lastCheckedOn": {
            "match": "type"
          }
        }
      }
    },
    {
      "description": "a query to list watches for ship-clusters account",
      "request": {
        "method": "POST",
        "path": "/graphql",
        "headers": {
          "Authorization": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpYXQiOjE1NDYzMDQ0MDAwMDAsInRva2VuIjoibm90LWNoZWNrZWQiLCJzZXNzaW9uSWQiOiJzaGlwLWNsdXN0ZXItYWNjb3VudC1zZXNzaW9uLTEifQ.d67EWx5TjTU6k1Q5Dg8Ay_zBJvpH_7XrGNEnkgKPR3g",
          "Content-Type": "application/json"
        },
        "body": {
          "operationName": "listWatches",
          "query": "\n  query listWatches {\n    listWatches {\n      id\n      stateJSON\n      watchName\n      slug\n      watchIcon\n      createdOn\n      lastUpdated\n      contributors {\n        id\n        createdAt\n        githubId\n        login\n        avatar_url\n      }\n      currentVersion {\n        title\n        status\n        createdOn\n        sequence\n        pullrequestNumber\n      }\n      pendingVersions {\n        title\n        status\n        createdOn\n        sequence\n        pullrequestNumber\n      }\n      pastVersions {\n        title\n        status\n        createdOn\n        sequence\n        pullrequestNumber\n      }\n      notifications {\n        id\n        createdOn\n        updatedOn\n        triggeredOn\n        enabled\n        isDefault\n        webhook {\n          uri\n        }\n        email {\n          recipientAddress\n        }\n      }\n      watches {\n        id\n        stateJSON\n        watchName\n        slug\n        watchIcon\n        createdOn\n        lastUpdated\n        contributors {\n          id\n          createdAt\n          githubId\n          login\n          avatar_url\n        }\n        currentVersion {\n          title\n          status\n          createdOn\n          sequence\n          pullrequestNumber\n        }\n        pendingVersions {\n          title\n          status\n          createdOn\n          sequence\n          pullrequestNumber\n        }\n        pastVersions {\n          title\n          status\n          createdOn\n          sequence\n          pullrequestNumber\n        }\n        notifications {\n          id\n          createdOn\n          updatedOn\n          triggeredOn\n          enabled\n          isDefault\n          webhook {\n            uri\n          }\n          email {\n            recipientAddress\n          }\n        }\n        cluster {\n          id\n          title\n          slug\n          createdOn\n          lastUpdated\n          gitOpsRef {\n            owner\n            repo\n            branch\n            path\n          }\n          shipOpsRef {\n            token\n          }\n        }\n      }\n    }\n  }\n",
          "variables": {
          }
        },
        "matchingRules": {
          "$.body.query": {
            "match": "regex",
            "regex": "\\s*query\\s*listWatches\\s*\\{\\s*listWatches\\s*\\{\\s*id\\s*stateJSON\\s*watchName\\s*slug\\s*watchIcon\\s*createdOn\\s*lastUpdated\\s*contributors\\s*\\{\\s*id\\s*createdAt\\s*githubId\\s*login\\s*avatar_url\\s*\\}\\s*currentVersion\\s*\\{\\s*title\\s*status\\s*createdOn\\s*sequence\\s*pullrequestNumber\\s*\\}\\s*pendingVersions\\s*\\{\\s*title\\s*status\\s*createdOn\\s*sequence\\s*pullrequestNumber\\s*\\}\\s*pastVersions\\s*\\{\\s*title\\s*status\\s*createdOn\\s*sequence\\s*pullrequestNumber\\s*\\}\\s*notifications\\s*\\{\\s*id\\s*createdOn\\s*updatedOn\\s*triggeredOn\\s*enabled\\s*isDefault\\s*webhook\\s*\\{\\s*uri\\s*\\}\\s*email\\s*\\{\\s*recipientAddress\\s*\\}\\s*\\}\\s*watches\\s*\\{\\s*id\\s*stateJSON\\s*watchName\\s*slug\\s*watchIcon\\s*createdOn\\s*lastUpdated\\s*contributors\\s*\\{\\s*id\\s*createdAt\\s*githubId\\s*login\\s*avatar_url\\s*\\}\\s*currentVersion\\s*\\{\\s*title\\s*status\\s*createdOn\\s*sequence\\s*pullrequestNumber\\s*\\}\\s*pendingVersions\\s*\\{\\s*title\\s*status\\s*createdOn\\s*sequence\\s*pullrequestNumber\\s*\\}\\s*pastVersions\\s*\\{\\s*title\\s*status\\s*createdOn\\s*sequence\\s*pullrequestNumber\\s*\\}\\s*notifications\\s*\\{\\s*id\\s*createdOn\\s*updatedOn\\s*triggeredOn\\s*enabled\\s*isDefault\\s*webhook\\s*\\{\\s*uri\\s*\\}\\s*email\\s*\\{\\s*recipientAddress\\s*\\}\\s*\\}\\s*cluster\\s*\\{\\s*id\\s*title\\s*slug\\s*createdOn\\s*lastUpdated\\s*gitOpsRef\\s*\\{\\s*owner\\s*repo\\s*branch\\s*path\\s*\\}\\s*shipOpsRef\\s*\\{\\s*token\\s*\\}\\s*\\}\\s*\\}\\s*\\}\\s*\\}\\s*"
          }
        }
      },
      "response": {
        "status": 200,
        "headers": {
          "Content-Type": "application/json"
        },
        "body": {
          "data": {
            "listWatches": [
              {
                "id": "better-db-midstream",
                "stateJSON": "\n  \"v1\": {\n    \"config\": null,\n    \"helmValues\": \"# Default values for better-db.\\n# This is a YAML-formatted file.\\n# Declare variables to be passed into your templates.\\n\\nreplicaCount: 1\\n\\nimage:\\n  repository: nginx\\n  tag: 1.15.1\\n  pullPolicy: IfNotPresent\\n\\nservice:\\n  type: ClusterIP\\n  port: 80\\n\\nsecurityContext:\\n  allowPrivilegeEscalation: true\\n\\nresources:\\n  # limits:\\n  #  cpu: 100m\\n  #  memory: 128Mi\\n  # requests:\\n  #  cpu: 100m\\n #  memory: 128Mi\\n\\nnodeSelector: {}\\n\\ntolerations: []\\n\\naffinity: {}\\n\",\n    \"releaseName\": \"better-db\",\n    \"helmValuesDefaults\": \"# Default values for better-db.\\n# This is a YAML-formatted file.\\n# Declare variables to be passed into your templates.\\n\\nreplicaCount: 1\\n\\nimage:\\nrepository: nginx\\n  tag: 1.15.1\\n  pullPolicy: IfNotPresent\\n\\nservice:\\n  type: ClusterIP\\n  port:80\\n\\nsecurityContext:\\n  allowPrivilegeEscalation: true\\n\\nresources:\\n  # limits:\\n  #  cpu: 100m\\n  #  memory: 128Mi\\n  # requests:\\n  #  cpu: 100m\\n  #  memory: 128Mi\\n\\nnodeSelector: {}\\n\\ntolerations: []\\n\\naffinity: {}\\n\",\n    \"upstream\": \"github.com/better-db/chart\",\n    \"metadata\": {\n   \"applicationType\": \"helm\",\n      \"sequence\": 0,\n      \"name\": \"better-db\",\n  \"releaseNotes\": \"bump\",\n      \"version\": \"0.1.3\",\n      \"license\": {\n        \"id\": \"\",\n    \"assignee\": \"\",\n        \"createdAt\": \"0001-01-01T00:00:00Z\",\n        \"expiresAt\": \"0001-01-01T00:00:00Z\",\n        \"type\": \"\"\n      }\n    },\n    \"contentSHA\": \"f6ce910a6e0d560c8687b774cf5e4f8848de312819b9173834fabe297a34a6c3\",\n    \"lifecycle\": {\n      \"stepsCompleted\": {\n\"intro\": true,\n        \"kustomize\": true,\n        \"kustomize-intro\": true,\n        \"render\": true,\n      \"values\": true\n      }\n    }\n  }\n}\n",
                "watchName": "Better DB Midstream",
                "slug": "ship-cluster-account/better-db-midstream",
                "createdOn": "2019-04-18 12:34:56.789",
                "lastUpdated": "2019-04-19 01:23:45.567",
                "watchIcon": "",
                "contributors": [
                  {
                    "id": "ship-cluster-account",
                    "createdAt": "2019-04-18 12:34:56.789",
                    "githubId": 2222,
                    "login": "ship-cluster-dev",
                    "avatar_url": "https://avatars3.githubusercontent.com/u/234567?v=4"
                  }
                ],
                "currentVersion": {
                  "title": "0.1.3",
                  "status": "deployed",
                  "createdOn": "2019-04-18 12:34:56.789",
                  "sequence": 0,
                  "pullrequestNumber": null
                },
                "pendingVersions": [

                ],
                "pastVersions": [

                ],
                "notifications": [

                ],
                "watches": [
                  {
                    "id": "better-db-prod",
                    "stateJSON": "{\n  \"v1\": {\n    \"config\": null,\n    \"releaseName\": \"ship\",\n    \"upstream\": \"http://ship-cloud-api.default.svc.cluster.local:3000/v1/watch/better-db-midstream/upstream.yaml?token=better-db-midstream-downstream-1\",\n    \"contentSHA\": \"2a5418afdd4eb29e72fe63b4ce756fbdb56f1553b4b5848b921d28ef4ab8421a\",\n    \"lifecycle\": {\n      \"stepsCompleted\": {\n        \"kustomize\": true,\n        \"kustomize-intro\": true,\n        \"render\": true\n      }\n    }\n  }\n}\n",
                    "watchName": "Better DB Ship 1",
                    "slug": "ship-cluster-account/better-db-prod",
                    "createdOn": "2019-04-19 12:34:56.789",
                    "lastUpdated": "2019-04-20 01:23:45.567",
                    "watchIcon": "",
                    "contributors": [
                      {
                        "id": "ship-cluster-account",
                        "createdAt": "2019-04-18 12:34:56.789",
                        "githubId": 2222,
                        "login": "ship-cluster-dev",
                        "avatar_url": "https://avatars3.githubusercontent.com/u/234567?v=4"
                      }
                    ],
                    "currentVersion": {
                      "title": "0.1.3",
                      "status": "deployed",
                      "createdOn": "2019-04-19 12:34:56.789",
                      "sequence": 0,
                      "pullrequestNumber": null
                    },
                    "pendingVersions": [
                      {
                        "title": "0.1.4",
                        "status": "pending",
                        "createdOn": "2019-04-20 12:34:56.789",
                        "sequence": 1,
                        "pullrequestNumber": null
                      }
                    ],
                    "pastVersions": [

                    ],
                    "notifications": [

                    ],
                    "cluster": {
                      "id": "ship-cluster-1",
                      "title": "Ship Cluster 1",
                      "slug": "ship-cluster-1",
                      "createdOn": "2019-04-18 12:34:56.78",
                      "lastUpdated": "2019-04-19 01:23:45.56",
                      "gitOpsRef": null,
                      "shipOpsRef": {
                        "token": "ship-cluster-1-token"
                      }
                    }
                  }
                ]
              }
            ]
          }
        },
        "matchingRules": {
          "$.body.data.listWatches[0].stateJSON": {
            "match": "type"
          },
          "$.body.data.listWatches[0].createdOn": {
            "match": "type"
          },
          "$.body.data.listWatches[0].lastUpdated": {
            "match": "type"
          },
          "$.body.data.listWatches[0].contributors[0].createdAt": {
            "match": "type"
          },
          "$.body.data.listWatches[0].currentVersion.createdOn": {
            "match": "type"
          },
          "$.body.data.listWatches[0].watches[0].createdOn": {
            "match": "type"
          },
          "$.body.data.listWatches[0].watches[0].lastUpdated": {
            "match": "type"
          },
          "$.body.data.listWatches[0].watches[0].contributors[0].createdAt": {
            "match": "type"
          },
          "$.body.data.listWatches[0].watches[0].currentVersion.createdOn": {
            "match": "type"
          },
          "$.body.data.listWatches[0].watches[0].pendingVersions[0].createdOn": {
            "match": "type"
          },
          "$.body.data.listWatches[0].watches[0].cluster.createdOn": {
            "match": "type"
          },
          "$.body.data.listWatches[0].watches[0].cluster.lastUpdated": {
            "match": "type"
          }
        }
      }
    },
    {
      "description": "a mutation to update a watch for single user",
      "request": {
        "method": "POST",
        "path": "/graphql",
        "headers": {
          "Authorization": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpYXQiOjE1NDYzMDQ0MDAwMDAsInRva2VuIjoibm90LWNoZWNrZWQiLCJzZXNzaW9uSWQiOiJzaW5nbGUtdXNlci1hY2NvdW50LXNlc3Npb24tMSJ9.DafcYfGJbqEvPxch9VzSnXcrUbvmtQtslzV0yVm_IBs",
          "Content-Type": "application/json"
        },
        "body": {
          "operationName": "updateWatch",
          "query": "\n  mutation updateWatch($watchId: String!, $watchName: String, $iconUri: String) {\n    updateWatch(watchId: $watchId, watchName: $watchName, iconUri: $iconUri) {\n      id\n      stateJSON\n      watchName\n      slug\n      watchIcon\n      createdOn\n      lastUpdated\n      contributors {\n        id\n        createdAt\n        githubId\n        login\n        avatar_url\n      }\n    }\n  }\n",
          "variables": {
            "watchId": "single-user-watch-update-1",
            "watchName": "Updated Single User Watch Update",
            "iconUri": "http://ccsuppliersource.com/wp-content/uploads/2018/12/bigstock_online_update_11303201.jpg"
          }
        },
        "matchingRules": {
          "$.body.query": {
            "match": "regex",
            "regex": "\\s*mutation\\s*updateWatch\\(\\$watchId:\\s*String!,\\s*\\$watchName:\\s*String,\\s*\\$iconUri:\\s*String\\)\\s*\\{\\s*updateWatch\\(watchId:\\s*\\$watchId,\\s*watchName:\\s*\\$watchName,\\s*iconUri:\\s*\\$iconUri\\)\\s*\\{\\s*id\\s*stateJSON\\s*watchName\\s*slug\\s*watchIcon\\s*createdOn\\s*lastUpdated\\s*contributors\\s*\\{\\s*id\\s*createdAt\\s*githubId\\s*login\\s*avatar_url\\s*\\}\\s*\\}\\s*\\}\\s*"
          }
        }
      },
      "response": {
        "status": 200,
        "headers": {
          "Content-Type": "application/json"
        },
        "body": {
          "data": {
            "updateWatch": {
              "id": "single-user-watch-update-1",
              "slug": "single-user/single-user-watch-update-1",
              "watchName": "Updated Single User Watch Update",
              "watchIcon": "http://ccsuppliersource.com/wp-content/uploads/2018/12/bigstock_online_update_11303201.jpg",
              "createdOn": "2019-04-10 12:34:56.789",
              "lastUpdated": "generated"
            }
          }
        },
        "matchingRules": {
          "$.body.data.updateWatch.createdOn": {
            "match": "type"
          },
          "$.body.data.updateWatch.lastUpdated": {
            "match": "type"
          }
        }
      }
    },
    {
      "description": "a query to list watches for a single user",
      "request": {
        "method": "POST",
        "path": "/graphql",
        "headers": {
          "Authorization": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpYXQiOjE1NDYzMDQ0MDAwMDAsInRva2VuIjoibm90LWNoZWNrZWQiLCJzZXNzaW9uSWQiOiJzaW5nbGUtdXNlci1kZWxldGUtd2F0Y2gtc2Vzc2lvbi0xIn0.Qsn4gRjHPbm2Miq260hpAbbKo4bCeYT97xTGVP0WXRc",
          "Content-Type": "application/json"
        },
        "body": {
          "operationName": "listWatchesBeforeDeletion",
          "query": "\n    query listWatchesBeforeDeletion {\n      listWatches {\n        id\n        watchName\n      }\n    }\n  ",
          "variables": {
          }
        },
        "matchingRules": {
          "$.body.query": {
            "match": "regex",
            "regex": "\\s*query\\s*listWatchesBeforeDeletion\\s*\\{\\s*listWatches\\s*\\{\\s*id\\s*watchName\\s*\\}\\s*\\}\\s*"
          }
        }
      },
      "response": {
        "status": 200,
        "headers": {
          "Content-Type": "application/json"
        },
        "body": {
          "data": {
            "listWatches": [
              {
                "id": "single-user-delete-watch-1",
                "watchName": "Single User Save This Watch"
              },
              {
                "id": "single-user-delete-watch-2",
                "watchName": "Single User Delete This Watch"
              }
            ]
          }
        }
      }
    },
    {
      "description": "a mutation to delete a watch for single user",
      "request": {
        "method": "POST",
        "path": "/graphql",
        "headers": {
          "Authorization": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpYXQiOjE1NDYzMDQ0MDAwMDAsInRva2VuIjoibm90LWNoZWNrZWQiLCJzZXNzaW9uSWQiOiJzaW5nbGUtdXNlci1kZWxldGUtd2F0Y2gtc2Vzc2lvbi0xIn0.Qsn4gRjHPbm2Miq260hpAbbKo4bCeYT97xTGVP0WXRc",
          "Content-Type": "application/json"
        },
        "body": {
          "operationName": "deleteWatch",
          "query": "\n  mutation deleteWatch($watchId: String!, $childWatchIds: [String]) {\n    deleteWatch(watchId: $watchId, childWatchIds: $childWatchIds)\n  }\n",
          "variables": {
            "watchId": "single-user-delete-watch-2"
          }
        },
        "matchingRules": {
          "$.body.query": {
            "match": "regex",
            "regex": "\\s*mutation\\s*deleteWatch\\(\\$watchId:\\s*String!,\\s*\\$childWatchIds:\\s*\\[String\\]\\)\\s*\\{\\s*deleteWatch\\(watchId:\\s*\\$watchId,\\s*childWatchIds:\\s*\\$childWatchIds\\)\\s*\\}\\s*"
          }
        }
      },
      "response": {
        "status": 200,
        "headers": {
          "Content-Type": "application/json"
        },
        "body": {
          "data": {
            "deleteWatch": true
          }
        }
      }
    },
    {
      "description": "a query to list watches after a delete occurs for a single user",
      "request": {
        "method": "POST",
        "path": "/graphql",
        "headers": {
          "Authorization": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpYXQiOjE1NDYzMDQ0MDAwMDAsInRva2VuIjoibm90LWNoZWNrZWQiLCJzZXNzaW9uSWQiOiJzaW5nbGUtdXNlci1kZWxldGUtd2F0Y2gtc2Vzc2lvbi0xIn0.Qsn4gRjHPbm2Miq260hpAbbKo4bCeYT97xTGVP0WXRc",
          "Content-Type": "application/json"
        },
        "body": {
          "operationName": "listWatchesAfterDeletion",
          "query": "\n    query listWatchesAfterDeletion {\n      listWatches {\n        id\n        watchName\n      }\n    }\n  ",
          "variables": {
          }
        },
        "matchingRules": {
          "$.body.query": {
            "match": "regex",
            "regex": "\\s*query\\s*listWatchesAfterDeletion\\s*\\{\\s*listWatches\\s*\\{\\s*id\\s*watchName\\s*\\}\\s*\\}\\s*"
          }
        }
      },
      "response": {
        "status": 200,
        "headers": {
          "Content-Type": "application/json"
        },
        "body": {
          "data": {
            "listWatches": [
              {
                "id": "single-user-delete-watch-1",
                "watchName": "Single User Save This Watch"
              }
            ]
          }
        }
      }
    }
  ],
  "metadata": {
    "pactSpecification": {
      "version": "2.0.0"
    }
  }
}