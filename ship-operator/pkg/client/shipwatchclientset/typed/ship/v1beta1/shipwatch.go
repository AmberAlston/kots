// Code generated by main. DO NOT EDIT.

package v1beta1

import (
	v1beta1 "github.com/replicatedhq/ship-operator/pkg/apis/ship/v1beta1"
	scheme "github.com/replicatedhq/ship-operator/pkg/client/shipwatchclientset/scheme"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	rest "k8s.io/client-go/rest"
)

// ShipWatchesGetter has a method to return a ShipWatchInterface.
// A group's client should implement this interface.
type ShipWatchesGetter interface {
	ShipWatches(namespace string) ShipWatchInterface
}

// ShipWatchInterface has methods to work with ShipWatch resources.
type ShipWatchInterface interface {
	Create(*v1beta1.ShipWatch) (*v1beta1.ShipWatch, error)
	Update(*v1beta1.ShipWatch) (*v1beta1.ShipWatch, error)
	UpdateStatus(*v1beta1.ShipWatch) (*v1beta1.ShipWatch, error)
	Delete(name string, options *v1.DeleteOptions) error
	DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error
	Get(name string, options v1.GetOptions) (*v1beta1.ShipWatch, error)
	List(opts v1.ListOptions) (*v1beta1.ShipWatchList, error)
	Watch(opts v1.ListOptions) (watch.Interface, error)
	Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1beta1.ShipWatch, err error)
	ShipWatchExpansion
}

// shipWatches implements ShipWatchInterface
type shipWatches struct {
	client rest.Interface
	ns     string
}

// newShipWatches returns a ShipWatches
func newShipWatches(c *ShipV1beta1Client, namespace string) *shipWatches {
	return &shipWatches{
		client: c.RESTClient(),
		ns:     namespace,
	}
}

// Get takes name of the shipWatch, and returns the corresponding shipWatch object, and an error if there is any.
func (c *shipWatches) Get(name string, options v1.GetOptions) (result *v1beta1.ShipWatch, err error) {
	result = &v1beta1.ShipWatch{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("shipwatches").
		Name(name).
		VersionedParams(&options, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// List takes label and field selectors, and returns the list of ShipWatches that match those selectors.
func (c *shipWatches) List(opts v1.ListOptions) (result *v1beta1.ShipWatchList, err error) {
	result = &v1beta1.ShipWatchList{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("shipwatches").
		VersionedParams(&opts, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// Watch returns a watch.Interface that watches the requested shipWatches.
func (c *shipWatches) Watch(opts v1.ListOptions) (watch.Interface, error) {
	opts.Watch = true
	return c.client.Get().
		Namespace(c.ns).
		Resource("shipwatches").
		VersionedParams(&opts, scheme.ParameterCodec).
		Watch()
}

// Create takes the representation of a shipWatch and creates it.  Returns the server's representation of the shipWatch, and an error, if there is any.
func (c *shipWatches) Create(shipWatch *v1beta1.ShipWatch) (result *v1beta1.ShipWatch, err error) {
	result = &v1beta1.ShipWatch{}
	err = c.client.Post().
		Namespace(c.ns).
		Resource("shipwatches").
		Body(shipWatch).
		Do().
		Into(result)
	return
}

// Update takes the representation of a shipWatch and updates it. Returns the server's representation of the shipWatch, and an error, if there is any.
func (c *shipWatches) Update(shipWatch *v1beta1.ShipWatch) (result *v1beta1.ShipWatch, err error) {
	result = &v1beta1.ShipWatch{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("shipwatches").
		Name(shipWatch.Name).
		Body(shipWatch).
		Do().
		Into(result)
	return
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().

func (c *shipWatches) UpdateStatus(shipWatch *v1beta1.ShipWatch) (result *v1beta1.ShipWatch, err error) {
	result = &v1beta1.ShipWatch{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("shipwatches").
		Name(shipWatch.Name).
		SubResource("status").
		Body(shipWatch).
		Do().
		Into(result)
	return
}

// Delete takes name of the shipWatch and deletes it. Returns an error if one occurs.
func (c *shipWatches) Delete(name string, options *v1.DeleteOptions) error {
	return c.client.Delete().
		Namespace(c.ns).
		Resource("shipwatches").
		Name(name).
		Body(options).
		Do().
		Error()
}

// DeleteCollection deletes a collection of objects.
func (c *shipWatches) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
	return c.client.Delete().
		Namespace(c.ns).
		Resource("shipwatches").
		VersionedParams(&listOptions, scheme.ParameterCodec).
		Body(options).
		Do().
		Error()
}

// Patch applies the patch and returns the patched shipWatch.
func (c *shipWatches) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1beta1.ShipWatch, err error) {
	result = &v1beta1.ShipWatch{}
	err = c.client.Patch(pt).
		Namespace(c.ns).
		Resource("shipwatches").
		SubResource(subresources...).
		Name(name).
		Body(data).
		Do().
		Into(result)
	return
}
