// Code generated by main. DO NOT EDIT.

package fake

import (
	v1beta1 "github.com/replicatedhq/ship-operator/pkg/apis/ship/v1beta1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeShipWatches implements ShipWatchInterface
type FakeShipWatches struct {
	Fake *FakeShipV1beta1
	ns   string
}

var shipwatchesResource = schema.GroupVersionResource{Group: "ship.replicated.com", Version: "v1beta1", Resource: "shipwatches"}

var shipwatchesKind = schema.GroupVersionKind{Group: "ship.replicated.com", Version: "v1beta1", Kind: "ShipWatch"}

// Get takes name of the shipWatch, and returns the corresponding shipWatch object, and an error if there is any.
func (c *FakeShipWatches) Get(name string, options v1.GetOptions) (result *v1beta1.ShipWatch, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewGetAction(shipwatchesResource, c.ns, name), &v1beta1.ShipWatch{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1beta1.ShipWatch), err
}

// List takes label and field selectors, and returns the list of ShipWatches that match those selectors.
func (c *FakeShipWatches) List(opts v1.ListOptions) (result *v1beta1.ShipWatchList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewListAction(shipwatchesResource, shipwatchesKind, c.ns, opts), &v1beta1.ShipWatchList{})

	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &v1beta1.ShipWatchList{}
	for _, item := range obj.(*v1beta1.ShipWatchList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested shipWatches.
func (c *FakeShipWatches) Watch(opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewWatchAction(shipwatchesResource, c.ns, opts))

}

// Create takes the representation of a shipWatch and creates it.  Returns the server's representation of the shipWatch, and an error, if there is any.
func (c *FakeShipWatches) Create(shipWatch *v1beta1.ShipWatch) (result *v1beta1.ShipWatch, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewCreateAction(shipwatchesResource, c.ns, shipWatch), &v1beta1.ShipWatch{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1beta1.ShipWatch), err
}

// Update takes the representation of a shipWatch and updates it. Returns the server's representation of the shipWatch, and an error, if there is any.
func (c *FakeShipWatches) Update(shipWatch *v1beta1.ShipWatch) (result *v1beta1.ShipWatch, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateAction(shipwatchesResource, c.ns, shipWatch), &v1beta1.ShipWatch{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1beta1.ShipWatch), err
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
func (c *FakeShipWatches) UpdateStatus(shipWatch *v1beta1.ShipWatch) (*v1beta1.ShipWatch, error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateSubresourceAction(shipwatchesResource, "status", c.ns, shipWatch), &v1beta1.ShipWatch{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1beta1.ShipWatch), err
}

// Delete takes name of the shipWatch and deletes it. Returns an error if one occurs.
func (c *FakeShipWatches) Delete(name string, options *v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewDeleteAction(shipwatchesResource, c.ns, name), &v1beta1.ShipWatch{})

	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeShipWatches) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
	action := testing.NewDeleteCollectionAction(shipwatchesResource, c.ns, listOptions)

	_, err := c.Fake.Invokes(action, &v1beta1.ShipWatchList{})
	return err
}

// Patch applies the patch and returns the patched shipWatch.
func (c *FakeShipWatches) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1beta1.ShipWatch, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceAction(shipwatchesResource, c.ns, name, data, subresources...), &v1beta1.ShipWatch{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1beta1.ShipWatch), err
}
