apiVersion: v1
data:
  initialize: |-
    #!/bin/sh
    set -e ; # Have script exit in the event of a failed command.

    # connectToMinio
    # Use a check-sleep-check loop to wait for Minio service to be available
    connectToMinio() {
      SCHEME=$1
      ATTEMPTS=0 ; LIMIT=29 ; # Allow 30 attempts
      set -e ; # fail if we can't read the keys.
      ACCESS=$(cat /config/accesskey) ; SECRET=$(cat /config/secretkey) ;
      set +e ; # The connections to minio are allowed to fail.
      echo "Connecting to Minio server: $SCHEME://$MINIO_ENDPOINT:$MINIO_PORT" ;
      MC_COMMAND="mc config host add myminio $SCHEME://$MINIO_ENDPOINT:$MINIO_PORT $ACCESS $SECRET" ;
      $MC_COMMAND ;
      STATUS=$? ;
      until [ $STATUS = 0 ]
      do
        ATTEMPTS=`expr $ATTEMPTS + 1` ;
        echo \"Failed attempts: $ATTEMPTS\" ;
        if [ $ATTEMPTS -gt $LIMIT ]; then
          exit 1 ;
        fi ;
        sleep 2 ; # 1 second intervals between attempts
        $MC_COMMAND ;
        STATUS=$? ;
      done ;
      set -e ; # reset `e` as active
      return 0
    }

    # checkBucketExists ($bucket)
    # Check if the bucket exists, by using the exit code of `mc ls`
    checkBucketExists() {
      BUCKET=$1
      CMD=$(/usr/bin/mc ls myminio/$BUCKET > /dev/null 2>&1)
      return $?
    }

    # createBucket ($bucket, $policy, $purge)
    # Ensure bucket exists, purging if asked to
    createBucket() {
      BUCKET=$1
      POLICY=$2
      PURGE=$3

      # Purge the bucket, if set & exists
      # Since PURGE is user input, check explicitly for `true`
      if [ $PURGE = true ]; then
        if checkBucketExists $BUCKET ; then
          echo "Purging bucket '$BUCKET'."
          set +e ; # don't exit if this fails
          /usr/bin/mc rm -r --force myminio/$BUCKET
          set -e ; # reset `e` as active
        else
          echo "Bucket '$BUCKET' does not exist, skipping purge."
        fi
      fi

      # Create the bucket if it does not exist
      if ! checkBucketExists $BUCKET ; then
        echo "Creating bucket '$BUCKET'"
        /usr/bin/mc mb myminio/$BUCKET
      else
        echo "Bucket '$BUCKET' already exists."
      fi

      # At this point, the bucket should exist, skip checking for existence
      # Set policy on the bucket
      echo "Setting policy of bucket '$BUCKET' to '$POLICY'."
      /usr/bin/mc policy $POLICY myminio/$BUCKET
    }

    # Try connecting to Minio instance
    scheme=http
    connectToMinio $scheme
    # Create the bucket
    createBucket shipbucket none false
kind: ConfigMap
metadata:
  labels:
    app: minio
    release: minio
  name: minio
---
apiVersion: v1
data:
  accesskey: bm90LWEta2V5
  secretkey: bm90LWEtc2VjcmV0
kind: Secret
metadata:
  labels:
    app: minio
    release: minio
  name: minio
type: Opaque
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: minio
    release: minio
  name: ship-cluster-s3
spec:
  ports:
  - name: service
    port: 4569
    protocol: TCP
    targetPort: 9000
    nodePort: 30456
  selector:
    app: minio
    release: minio
  type: NodePort
---
apiVersion: apps/v1beta2
kind: Deployment
metadata:
  labels:
    app: minio
    release: minio
  name: minio
spec:
  selector:
    matchLabels:
      app: minio
      release: minio
  strategy:
    rollingUpdate:
      maxSurge: 100%
      maxUnavailable: 0
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: minio
        release: minio
      name: minio
    spec:
      containers:
      - command:
        - /bin/sh
        - -ce
        - /usr/bin/docker-entrypoint.sh minio -C /root/.minio/ server /export
        env:
        - name: MINIO_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              key: accesskey
              name: minio
        - name: MINIO_SECRET_KEY
          valueFrom:
            secretKeyRef:
              key: secretkey
              name: minio
        - name: MINIO_BROWSER
          value: "on"
        image: minio/minio:RELEASE.2019-05-14T23-57-45Z
        imagePullPolicy: IfNotPresent
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /minio/health/live
            port: service
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 30
          successThreshold: 1
          timeoutSeconds: 1
        name: minio
        ports:
        - containerPort: 9000
          name: service
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /minio/health/ready
            port: service
          initialDelaySeconds: 5
          periodSeconds: 15
          successThreshold: 1
          timeoutSeconds: 1
        resources:
          requests:
            cpu: 250m
            memory: 256Mi
        volumeMounts:
        - mountPath: /export
          name: export
        - mountPath: /root/.minio/
          name: minio-config-dir
      volumes:
      - name: export
        persistentVolumeClaim:
          claimName: minio
      - name: minio-user
        secret:
          secretName: minio
      - emptyDir: {}
        name: minio-config-dir
---
apiVersion: batch/v1
kind: Job
metadata:
  annotations:
    helm.sh/hook: post-install,post-upgrade
    helm.sh/hook-delete-policy: hook-succeeded
  labels:
    app: minio
    release: minio
  name: minio-make-bucket-job
spec:
  template:
    metadata:
      labels:
        app: minio
        release: minio
    spec:
      containers:
      - command:
        - /bin/sh
        - /config/initialize
        env:
        - name: MINIO_ENDPOINT
          value: ship-cluster-s3
        - name: MINIO_PORT
          value: "4569"
        image: minio/mc:RELEASE.2019-05-01T23-27-44Z
        imagePullPolicy: IfNotPresent
        name: minio-mc
        volumeMounts:
        - mountPath: /config
          name: minio-configuration
      restartPolicy: OnFailure
      volumes:
      - name: minio-configuration
        projected:
          sources:
          - configMap:
              name: minio
          - secret:
              name: minio
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  labels:
    app: minio
    release: minio
  name: minio
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi
