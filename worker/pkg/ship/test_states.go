package ship

// This contains test state.json files for unit tests

var shipEnterpriseStateJSON = `{
	"v1": {
	  "config": {
	    "s3_endpoint": ""
	  },
	  "releaseName": "ship-enterprise-beta",
	  "upstream": "replicated.app/ship-enterprise/?license_id=yep",
	  "metadata": {
	    "applicationType": "replicated.app",
	    "sequence": 0,
	    "releaseNotes": "",
	    "version": "0.2.4",
	    "licenseID": "yep",
	    "appSlug": "ship-enterprise",
	    "license": {
	      "id": "yep",
	      "assignee": "tester",
	      "createdAt": "2019-04-22T15:53:48Z",
	      "expiresAt": "0001-01-01T00:00:00Z",
	      "type": "trial"
	    }
	  },
	  "upstreamContents": {
	    "appRelease": {
	      "id": "some-id",
	      "sequence": 1018,
	      "channelId": "some-channel-id",
	      "channelName": "Ship Enterprise Beta",
	      "channelIcon": "",
	      "semver": "0.2.4",
	      "releaseNotes": "",
	      "spec": "---\n yaml: true",
	      "images": [],
	      "githubContents": [],
	      "created": "Thu Jun 20 2019 01:47:15 GMT+0000 (UTC)",
	      "registrySecret": "its-a-secret",
	      "entitlements": {
		"meta": {
		  "last_updated": "0001-01-01T00:00:00Z",
		  "customer_id": ""
		},
		"signature": "signed"
	      },
	      "collectSpec": "collect:\n  v1:[]",
	      "analyzeSpec": "analyze:\n  v1:[]"
	    }
	  },
	  "shipVersion": {
	    "version": "0.46.1",
	    "buildTime": "2019-06-13T18:53:28Z",
	    "dependencies": {
	      "helm": "v2.14.1",
	      "kustomize": "v2.0.3",
	      "terraform": "v0.11.14"
	    }
	  },
	  "contentSHA": "a9a82c31e28627d9a9c1e9ba6fc542a4db62d9c7815693e1098c79577a0f15ab"
	}
      }`

var consulHelmChartStateJSON = `{
	"v1": {
	  "config": null,
	  "helmValues": "# Default values for consul.\n# This is a YAML-formatted file.\n# Declare name/value pairs to be passed into your templates.\n# name: value\n\n## Consul service ports\nHttpPort: 8500\nRpcPort: 8400\nSerflanPort: 8301\nSerflanUdpPort: 8301\nSerfwanPort: 8302\nSerfwanUdpPort: 8302\nServerPort: 8300\nConsulDnsPort: 8600\n\n## Specify the domain with which consul should run with\n## This will be passed as a -domain parameter\nDomain: consul\n\n## Used as selector\nComponent: \"consul\"\nReplicas: 3\nImage: \"consul\"\nImageTag: \"1.0.0\"\nImagePullPolicy: \"Always\"\nResources: {}\n # requests:\n #   cpu: \"100m\"\n #   memory: \"256Mi\"\n # limits:\n #   cpu: \"500m\"\n #   memory: \"512Mi\"\n## Persistent volume size\n\npriorityClassName: \"\"\n\nStorage: \"1Gi\"\n\n## Needed for 0.8.0 and later IF all consul containers are spun up\n## on the same machine. Without this they all generate the same\n## host id.\nDisableHostNodeId: false\n\n## Datacenter name for consul. If not supplied, will use the consul\n## default 'dc1'\n# DatacenterName: dc1\n\n## Encrypt Gossip Traffic\nGossip:\n  Encrypt: true\n  Create: true\n\n## predefined value for gossip key.\n## Will use a generated random alpha numeric if not provided\n# GossipKey: key\n\n## consul data Persistent Volume Storage Class\n## If defined, StorageClassName: \u003cstorageClass\u003e\n## If set to \"-\", StorageClassName: \"\", which disables dynamic provisioning\n## If undefined (the default) or set to null, no storageClassName spec is\n##   set, choosing the default provisioner.  (gp2 on AWS, standard on\n##   GKE, AWS \u0026 OpenStack)\n##\n# StorageClass: \"-\"\n\n## Setting maxUnavailable will create a pod disruption budget that will prevent\n## voluntarty cluster administration from taking down too many consul pods. If\n## you set maxUnavailable, you should set it to ceil((n/2) - 1), where\n## n = Replicas. For example, if you have 5 or 6 Replicas, you'll want to set\n## maxUnavailable = 2. If you are using the default of 3 Replicas, you'll want\n## to set maxUnavailable to 1.\nmaxUnavailable: 1\n\n## nodeAffinity settings\n# nodeAffinity:\n#   requiredDuringSchedulingIgnoredDuringExecution:\n#     nodeSelectorTerms:\n#     - matchExpressions:\n#       - key: cloud.google.com/gke-preemptible\n#         operator: NotIn\n#         values:\n#         - true\n\n## Affinity settings\naffinity: |\n  podAntiAffinity:\n    preferredDuringSchedulingIgnoredDuringExecution:\n    - weight: 1\n      podAffinityTerm:\n        topologyKey: kubernetes.io/hostname\n        labelSelector:\n          matchExpressions:\n          - key: component\n            operator: In\n            values:\n            - \"{{ .Release.Name }}-{{ .Values.Component }}\"\n\n## Enable Consul Web UI\n##\nui:\n  enabled: true\n## Create dedicated UI service\n##\nuiService:\n  enabled: true\n  type: \"NodePort\"\n  annotations: {}\n\nConsulConfig: []\n#  - type: secret\n#    name: consul-defaults\n#  - type: configMap\n#    name: consul-defaults\n\n## Create an Ingress for the Web UI\nuiIngress:\n  enabled: false\n  annotations: {}\n  labels: {}\n  hosts: []\n  tls: {}\n\n## Useful when ACLs are enabled\nacl:\n  enabled: false\n  masterToken: \"\"\n  agentToken: \"\"\n\n## test container details\ntest:\n  image: lachlanevenson/k8s-kubectl\n  imageTag: v1.4.8-bash\n  rbac:\n    create: false\n    serviceAccountName: \"\"\n\nnodeSelector: {}\ntolerations: []\nadditionalLabels: {}\n",
	  "releaseName": "consul",
	  "helmValuesDefaults": "# Default values for consul.\n# This is a YAML-formatted file.\n# Declare name/value pairs to be passed into your templates.\n# name: value\n\n## Consul service ports\nHttpPort: 8500\nRpcPort: 8400\nSerflanPort: 8301\nSerflanUdpPort: 8301\nSerfwanPort: 8302\nSerfwanUdpPort: 8302\nServerPort: 8300\nConsulDnsPort: 8600\n\n## Specify the domain with which consul should run with\n## This will be passed as a -domain parameter\nDomain: consul\n\n## Used as selector\nComponent: \"consul\"\nReplicas: 3\nImage: \"consul\"\nImageTag: \"1.0.0\"\nImagePullPolicy: \"Always\"\nResources: {}\n # requests:\n #   cpu: \"100m\"\n #   memory: \"256Mi\"\n # limits:\n #   cpu: \"500m\"\n #   memory: \"512Mi\"\n## Persistent volume size\n\npriorityClassName: \"\"\n\nStorage: \"1Gi\"\n\n## Needed for 0.8.0 and later IF all consul containers are spun up\n## on the same machine. Without this they all generate the same\n## host id.\nDisableHostNodeId: false\n\n## Datacenter name for consul. If not supplied, will use the consul\n## default 'dc1'\n# DatacenterName: dc1\n\n## Encrypt Gossip Traffic\nGossip:\n  Encrypt: true\n  Create: true\n\n## predefined value for gossip key.\n## Will use a generated random alpha numeric if not provided\n# GossipKey: key\n\n## consul data Persistent Volume Storage Class\n## If defined, StorageClassName: \u003cstorageClass\u003e\n## If set to \"-\", StorageClassName: \"\", which disables dynamic provisioning\n## If undefined (the default) or set to null, no storageClassName spec is\n##   set, choosing the default provisioner.  (gp2 on AWS, standard on\n##   GKE, AWS \u0026 OpenStack)\n##\n# StorageClass: \"-\"\n\n## Setting maxUnavailable will create a pod disruption budget that will prevent\n## voluntarty cluster administration from taking down too many consul pods. If\n## you set maxUnavailable, you should set it to ceil((n/2) - 1), where\n## n = Replicas. For example, if you have 5 or 6 Replicas, you'll want to set\n## maxUnavailable = 2. If you are using the default of 3 Replicas, you'll want\n## to set maxUnavailable to 1.\nmaxUnavailable: 1\n\n## nodeAffinity settings\n# nodeAffinity:\n#   requiredDuringSchedulingIgnoredDuringExecution:\n#     nodeSelectorTerms:\n#     - matchExpressions:\n#       - key: cloud.google.com/gke-preemptible\n#         operator: NotIn\n#         values:\n#         - true\n\n## Affinity settings\naffinity: |\n  podAntiAffinity:\n    preferredDuringSchedulingIgnoredDuringExecution:\n    - weight: 1\n      podAffinityTerm:\n        topologyKey: kubernetes.io/hostname\n        labelSelector:\n          matchExpressions:\n          - key: component\n            operator: In\n            values:\n            - \"{{ .Release.Name }}-{{ .Values.Component }}\"\n\n## Enable Consul Web UI\n##\nui:\n  enabled: true\n## Create dedicated UI service\n##\nuiService:\n  enabled: true\n  type: \"NodePort\"\n  annotations: {}\n\nConsulConfig: []\n#  - type: secret\n#    name: consul-defaults\n#  - type: configMap\n#    name: consul-defaults\n\n## Create an Ingress for the Web UI\nuiIngress:\n  enabled: false\n  annotations: {}\n  labels: {}\n  hosts: []\n  tls: {}\n\n## Useful when ACLs are enabled\nacl:\n  enabled: false\n  masterToken: \"\"\n  agentToken: \"\"\n\n## test container details\ntest:\n  image: lachlanevenson/k8s-kubectl\n  imageTag: v1.4.8-bash\n  rbac:\n    create: false\n    serviceAccountName: \"\"\n\nnodeSelector: {}\ntolerations: []\nadditionalLabels: {}\n",
	  "upstream": "github.com/helm/charts/stable/consul",
	  "metadata": {
	    "applicationType": "helm",
	    "sequence": 0,
	    "icon": "https://raw.githubusercontent.com/hashicorp/consul/bce3809dfca37b883828c3715b84143dd71c0f85/website/source/assets/images/favicons/android-chrome-512x512.png",
	    "name": "consul",
	    "releaseNotes": "[stable/consul] Fix ingress service name (#14662)\n\n* Fix ingress service name\n\nSigned-off-by: Philip Laine \u003cphilip.laine@gmail.com\u003e\n\n* Bump version\n\nSigned-off-by: Philip Laine \u003cphilip.laine@gmail.com\u003e",
	    "version": "3.6.3",
	    "license": {
	      "id": "",
	      "assignee": "",
	      "createdAt": "0001-01-01T00:00:00Z",
	      "expiresAt": "0001-01-01T00:00:00Z",
	      "type": ""
	    }
	  },
	  "upstreamContents": {
	    "upstreamFiles": [
	      {
		"filePath": "Chart.yaml",
		"fileContents": "YXBpVmVyc2lvbjogdjEKbmFtZTogY29uc3VsCmhvbWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9oYXNoaWNvcnAvY29uc3VsCnZlcnNpb246IDMuNi4zCmFwcFZlcnNpb246IDEuMC4wCmRlc2NyaXB0aW9uOiBIaWdobHkgYXZhaWxhYmxlIGFuZCBkaXN0cmlidXRlZCBzZXJ2aWNlIGRpc2NvdmVyeSBhbmQga2V5LXZhbHVlIHN0b3JlCiAgZGVzaWduZWQgd2l0aCBzdXBwb3J0IGZvciB0aGUgbW9kZXJuIGRhdGEgY2VudGVyIHRvIG1ha2UgZGlzdHJpYnV0ZWQgc3lzdGVtcyBhbmQKICBjb25maWd1cmF0aW9uIGVhc3kuCmljb246IGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9oYXNoaWNvcnAvY29uc3VsL2JjZTM4MDlkZmNhMzdiODgzODI4YzM3MTViODQxNDNkZDcxYzBmODUvd2Vic2l0ZS9zb3VyY2UvYXNzZXRzL2ltYWdlcy9mYXZpY29ucy9hbmRyb2lkLWNocm9tZS01MTJ4NTEyLnBuZwpzb3VyY2VzOgotIGh0dHBzOi8vZ2l0aHViLmNvbS9rZWxzZXloaWdodG93ZXIvY29uc3VsLW9uLWt1YmVybmV0ZXMKbWFpbnRhaW5lcnM6Ci0gbmFtZTogbGFjaGllODMKICBlbWFpbDogbGFjaGxhbi5ldmVuc29uQG1pY3Jvc29mdC5jb20K"
	      },
	      {
		"filePath": "README.md",
		"fileContents": ""
	      },
	      {
		"filePath": "templates/NOTES.txt",
		"fileContents": "MS4gV2F0Y2ggYWxsIGNsdXN0ZXIgbWVtYmVycyBjb21lIHVwLgogICQga3ViZWN0bCBnZXQgcG9kcyAtLW5hbWVzcGFjZT17eyAuUmVsZWFzZS5OYW1lc3BhY2UgfX0gLXcKMi4gVGVzdCBjbHVzdGVyIGhlYWx0aCB1c2luZyBIZWxtIHRlc3QuCiAgJCBoZWxtIHRlc3Qge3sgdGVtcGxhdGUgImNvbnN1bC5mdWxsbmFtZSIgLiB9fQozLiAoT3B0aW9uYWwpIE1hbnVhbGx5IGNvbmZpcm0gY29uc3VsIGNsdXN0ZXIgaXMgaGVhbHRoeS4KICAkIENPTlNVTF9QT0Q9JChrdWJlY3RsIGdldCBwb2RzIC1sPSdyZWxlYXNlPXt7IHRlbXBsYXRlICJjb25zdWwuZnVsbG5hbWUiIC4gfX0nIC0tb3V0cHV0PWpzb25wYXRoPXsuaXRlbXNbMF0ubWV0YWRhdGEubmFtZX0pCiAgJCBrdWJlY3RsIGV4ZWMgJENPTlNVTF9QT0QgY29uc3VsIG1lbWJlcnMgLS1uYW1lc3BhY2U9e3sgLlJlbGVhc2UuTmFtZXNwYWNlIH19IHwgZ3JlcCBzZXJ2ZXIK"
	      },
	      {
		"filePath": "templates/_helpers.tpl",
		"fileContents": "e3svKiB2aW06IHNldCBmaWxldHlwZT1tdXN0YWNoZTogKi99fQp7ey8qCkV4cGFuZCB0aGUgbmFtZSBvZiB0aGUgY2hhcnQuCiovfX0Ke3stIGRlZmluZSAiY29uc3VsLm5hbWUiIC19fQp7ey0gZGVmYXVsdCAuQ2hhcnQuTmFtZSAuVmFsdWVzLm5hbWVPdmVycmlkZSB8IHRydW5jIDYzIHwgdHJpbVN1ZmZpeCAiLSIgLX19Cnt7LSBlbmQgLX19Cgp7ey8qCkNyZWF0ZSBhIGRlZmF1bHQgZnVsbHkgcXVhbGlmaWVkIGFwcCBuYW1lLgpXZSB0cnVuY2F0ZSBhdCA2MyBjaGFycyBiZWNhdXNlIHNvbWUgS3ViZXJuZXRlcyBuYW1lIGZpZWxkcyBhcmUgbGltaXRlZCB0byB0aGlzIChieSB0aGUgRE5TIG5hbWluZyBzcGVjKS4KSWYgcmVsZWFzZSBuYW1lIGNvbnRhaW5zIGNoYXJ0IG5hbWUgaXQgd2lsbCBiZSB1c2VkIGFzIGEgZnVsbCBuYW1lLgoqL319Cnt7LSBkZWZpbmUgImNvbnN1bC5mdWxsbmFtZSIgLX19Cnt7LSBpZiAuVmFsdWVzLmZ1bGxuYW1lT3ZlcnJpZGUgLX19Cnt7LSAuVmFsdWVzLmZ1bGxuYW1lT3ZlcnJpZGUgfCB0cnVuYyA2MyB8IHRyaW1TdWZmaXggIi0iIC19fQp7ey0gZWxzZSAtfX0Ke3stICRuYW1lIDo9IGRlZmF1bHQgLkNoYXJ0Lk5hbWUgLlZhbHVlcy5uYW1lT3ZlcnJpZGUgLX19Cnt7LSBpZiBjb250YWlucyAkbmFtZSAuUmVsZWFzZS5OYW1lIC19fQp7ey0gLlJlbGVhc2UuTmFtZSB8IHRydW5jIDYzIHwgdHJpbVN1ZmZpeCAiLSIgLX19Cnt7LSBlbHNlIC19fQp7ey0gcHJpbnRmICIlcy0lcyIgLlJlbGVhc2UuTmFtZSAkbmFtZSB8IHRydW5jIDYzIHwgdHJpbVN1ZmZpeCAiLSIgLX19Cnt7LSBlbmQgLX19Cnt7LSBlbmQgLX19Cnt7LSBlbmQgLX19Cgp7ey8qCkNyZWF0ZSBjaGFydCBuYW1lIGFuZCB2ZXJzaW9uIGFzIHVzZWQgYnkgdGhlIGNoYXJ0IGxhYmVsLgoqL319Cnt7LSBkZWZpbmUgImNvbnN1bC5jaGFydCIgLX19Cnt7LSBwcmludGYgIiVzLSVzIiAuQ2hhcnQuTmFtZSAuQ2hhcnQuVmVyc2lvbiB8IHJlcGxhY2UgIisiICJfIiB8IHRydW5jIDYzIHwgdHJpbVN1ZmZpeCAiLSIgLX19Cnt7LSBlbmQgLX19Cg=="
	      },
	      {
		"filePath": "templates/basic-acls.yaml",
		"fileContents": "e3stIGlmIC5WYWx1ZXMuYWNsLmVuYWJsZWR9fQphcGlWZXJzaW9uOiBiYXRjaC92MQpraW5kOiBKb2IKbWV0YWRhdGE6CiAgbmFtZTogImNvbmZpZ3VyZS1iYXNpYy1hY2xzIgogIGFubm90YXRpb25zOgogICAgImhlbG0uc2gvaG9vayI6IHBvc3QtaW5zdGFsbAogICAgImhlbG0uc2gvaG9vay1kZWxldGUtcG9saWN5IjogaG9vay1zdWNjZWVkZWQKICBsYWJlbHM6CiAgICBoZXJpdGFnZToge3sgLlJlbGVhc2UuU2VydmljZSB8IHF1b3RlIH19CiAgICByZWxlYXNlOiB7eyAuUmVsZWFzZS5OYW1lIHwgcXVvdGUgfX0KICAgIGNoYXJ0OiB7eyB0ZW1wbGF0ZSAiY29uc3VsLmNoYXJ0IiAuIH19CiAgICBjb21wb25lbnQ6ICJ7eyAuUmVsZWFzZS5OYW1lIH19LXt7IC5WYWx1ZXMuQ29tcG9uZW50IH19IgpzcGVjOgogIHRlbXBsYXRlOgogICAgbWV0YWRhdGE6CiAgICAgIG5hbWU6ICJjb25maWd1cmUtYmFzaWMtYWNscyIKICAgICAgbGFiZWxzOgogICAgICAgIGhlcml0YWdlOiB7eyAuUmVsZWFzZS5TZXJ2aWNlIHwgcXVvdGUgfX0KICAgICAgICByZWxlYXNlOiB7eyAuUmVsZWFzZS5OYW1lIHwgcXVvdGUgfX0KICAgICAgICBjaGFydDoge3sgdGVtcGxhdGUgImNvbnN1bC5jaGFydCIgLiB9fQogICAgICAgIGNvbXBvbmVudDogInt7IC5SZWxlYXNlLk5hbWUgfX0te3sgLlZhbHVlcy5Db21wb25lbnQgfX0iCiAgICBzcGVjOgogICAgICByZXN0YXJ0UG9saWN5OiBOZXZlcgogICAgICBjb250YWluZXJzOgogICAgICAtIG5hbWU6ICJhZGQtYWdlbnQtYWNsIgogICAgICAgIGltYWdlOiBhcHByb3ByaWF0ZS9jdXJsOmxhdGVzdAogICAgICAgIGFyZ3M6CiAgICAgICAgLSAtWCAKICAgICAgICAtIFBVVAogICAgICAgIC0gLS1oZWFkZXIKICAgICAgICAtICdYLUNvbnN1bC1Ub2tlbjoge3sgLlZhbHVlcy5hY2wubWFzdGVyVG9rZW4gfX0nCiAgICAgICAgLSAtLWRhdGEKICAgICAgICAtICd7ICJOYW1lIjogIkFnZW50IFRva2VuIiwgIlR5cGUiOiAiY2xpZW50IiwgIlJ1bGVzIjogIm5vZGUgXCJcIiB7IHBvbGljeSA9IFwid3JpdGVcIiB9IHNlcnZpY2UgXCJcIiB7IHBvbGljeSA9IFwicmVhZFwiIH0ga2V5IFwiX3JleGVjXCIgeyBwb2xpY3kgPSBcIndyaXRlXCIgfSIsICJJRCI6ICJ7eyAuVmFsdWVzLmFjbC5hZ2VudFRva2VuIH19In0nCiAgICAgICAgLSAnaHR0cDovL3t7IC5SZWxlYXNlLk5hbWUgfX0ue3sgLlJlbGVhc2UuTmFtZXNwYWNlIH19LnN2Yy5jbHVzdGVyLmxvY2FsOnt7IC5WYWx1ZXMuSHR0cFBvcnQgfX0vdjEvYWNsL2NyZWF0ZScKICAgICAgLSBuYW1lOiAibW9kaWZ5LWFub255bW91cy1hY2wiCiAgICAgICAgaW1hZ2U6IGFwcHJvcHJpYXRlL2N1cmw6bGF0ZXN0CiAgICAgICAgYXJnczoKICAgICAgICAtIC1YIAogICAgICAgIC0gUFVUCiAgICAgICAgLSAtLWhlYWRlcgogICAgICAgIC0gJ1gtQ29uc3VsLVRva2VuOiB7eyAuVmFsdWVzLmFjbC5tYXN0ZXJUb2tlbiB9fScKICAgICAgICAtIC0tZGF0YQogICAgICAgIC0gJ3sgIk5hbWUiOiAiQW5vbnltb3VzIFRva2VuIiwgIlR5cGUiOiAiY2xpZW50IiwgIlJ1bGVzIjogIm5vZGUgXCJcIiB7IHBvbGljeSA9IFwicmVhZFwiIH0iLCAiSUQiOiAiYW5vbnltb3VzIn0nCiAgICAgICAgLSAnaHR0cDovL3t7IC5SZWxlYXNlLk5hbWUgfX0ue3sgLlJlbGVhc2UuTmFtZXNwYWNlIH19LnN2Yy5jbHVzdGVyLmxvY2FsOnt7IC5WYWx1ZXMuSHR0cFBvcnQgfX0vdjEvYWNsL2NyZWF0ZScKe3stIGVuZCB9fQ=="
	      },
	      {
		"filePath": "templates/consul-ingress.yaml",
		"fileContents": "e3stIGlmIC5WYWx1ZXMudWlJbmdyZXNzLmVuYWJsZWQgLX19Cnt7LSAkcmVsZWFzZU5hbWUgOj0gLlJlbGVhc2UuTmFtZSAtfX0Ke3stICRzZXJ2aWNlUG9ydCA6PSAuVmFsdWVzLkh0dHBQb3J0IC19fQp7ey0gJHNlcnZpY2VOYW1lIDo9IGluY2x1ZGUgImNvbnN1bC5mdWxsbmFtZSIgLiAtfX0KYXBpVmVyc2lvbjogZXh0ZW5zaW9ucy92MWJldGExCmtpbmQ6IEluZ3Jlc3MKbWV0YWRhdGE6CiAgYW5ub3RhdGlvbnM6CiAge3stIHJhbmdlICRrZXksICR2YWx1ZSA6PSAuVmFsdWVzLnVpSW5ncmVzcy5hbm5vdGF0aW9ucyB9fQogICAge3sgJGtleSB9fToge3sgJHZhbHVlIHwgcXVvdGUgfX0KICB7ey0gZW5kIH19CiAgbGFiZWxzOgogICAgaGVyaXRhZ2U6IHt7IC5SZWxlYXNlLlNlcnZpY2UgfCBxdW90ZSB9fQogICAgcmVsZWFzZToge3sgLlJlbGVhc2UuTmFtZSB8IHF1b3RlIH19CiAgICBjaGFydDoge3sgdGVtcGxhdGUgImNvbnN1bC5jaGFydCIgLiB9fQogICAgY29tcG9uZW50OiAie3sgLlJlbGVhc2UuTmFtZSB9fS17eyAuVmFsdWVzLkNvbXBvbmVudCB9fSIKICAgIHt7LSByYW5nZSAka2V5LCAkdmFsdWUgOj0gLlZhbHVlcy51aUluZ3Jlc3MubGFiZWxzIH19CiAgICB7eyAka2V5IH19OiB7eyAkdmFsdWUgfCBxdW90ZSB9fQogICAge3stIGVuZCB9fQogIG5hbWU6ICJ7eyB0ZW1wbGF0ZSAiY29uc3VsLmZ1bGxuYW1lIiAuIH19LXVpIgpzcGVjOgogIHJ1bGVzOgogIHt7LSByYW5nZSAuVmFsdWVzLnVpSW5ncmVzcy5ob3N0cyB9fQogICAgLSBob3N0OiB7eyAuIH19CiAgICAgIGh0dHA6CiAgICAgICAgcGF0aHM6CiAgICAgICAgICAtIGJhY2tlbmQ6CiAgICAgICAgICAgICAgc2VydmljZU5hbWU6IHt7ICRzZXJ2aWNlTmFtZSB9fQogICAgICAgICAgICAgIHNlcnZpY2VQb3J0OiB7eyAkc2VydmljZVBvcnQgfX0KICB7ey0gZW5kIC19fQogIHt7LSBpZiAuVmFsdWVzLnVpSW5ncmVzcy50bHMgfX0KICB0bHM6Cnt7IHRvWWFtbCAuVmFsdWVzLnVpSW5ncmVzcy50bHMgfCBpbmRlbnQgNCB9fQogIHt7LSBlbmQgLX19Cnt7LSBlbmQgfX0K"
	      },
	      {
		"filePath": "templates/consul-service.yaml",
		"fileContents": "YXBpVmVyc2lvbjogdjEKa2luZDogU2VydmljZQptZXRhZGF0YToKICBuYW1lOiAie3sgdGVtcGxhdGUgImNvbnN1bC5mdWxsbmFtZSIgLiB9fSIKICBsYWJlbHM6CiAgICBoZXJpdGFnZToge3sgLlJlbGVhc2UuU2VydmljZSB8IHF1b3RlIH19CiAgICByZWxlYXNlOiB7eyAuUmVsZWFzZS5OYW1lIHwgcXVvdGUgfX0KICAgIGNoYXJ0OiB7eyB0ZW1wbGF0ZSAiY29uc3VsLmNoYXJ0IiAuIH19CiAgICBjb21wb25lbnQ6ICJ7eyAuUmVsZWFzZS5OYW1lIH19LXt7IC5WYWx1ZXMuQ29tcG9uZW50IH19IgogIGFubm90YXRpb25zOgogICAgc2VydmljZS5hbHBoYS5rdWJlcm5ldGVzLmlvL3RvbGVyYXRlLXVucmVhZHktZW5kcG9pbnRzOiAidHJ1ZSIKc3BlYzoKICBwb3J0czoKICAtIG5hbWU6IGh0dHAKICAgIHBvcnQ6IHt7IC5WYWx1ZXMuSHR0cFBvcnQgfX0KICAtIG5hbWU6IHJwYwogICAgcG9ydDoge3sgLlZhbHVlcy5ScGNQb3J0IH19CiAgLSBuYW1lOiBzZXJmbGFuLXRjcAogICAgcHJvdG9jb2w6ICJUQ1AiCiAgICBwb3J0OiB7eyAuVmFsdWVzLlNlcmZsYW5Qb3J0IH19CiAgLSBuYW1lOiBzZXJmbGFuLXVkcAogICAgcHJvdG9jb2w6ICJVRFAiCiAgICBwb3J0OiB7eyAuVmFsdWVzLlNlcmZsYW5VZHBQb3J0IH19CiAgLSBuYW1lOiBzZXJmd2FuLXRjcAogICAgcHJvdG9jb2w6ICJUQ1AiCiAgICBwb3J0OiB7eyAuVmFsdWVzLlNlcmZ3YW5Qb3J0IH19CiAgLSBuYW1lOiBzZXJmd2FuLXVkcAogICAgcHJvdG9jb2w6ICJVRFAiCiAgICBwb3J0OiB7eyAuVmFsdWVzLlNlcmZ3YW5VZHBQb3J0IH19CiAgLSBuYW1lOiBzZXJ2ZXIKICAgIHBvcnQ6IHt7LlZhbHVlcy5TZXJ2ZXJQb3J0fX0KICAtIG5hbWU6IGNvbnN1bGRucy10Y3AKICAgIHBvcnQ6IHt7LlZhbHVlcy5Db25zdWxEbnNQb3J0fX0KICAtIG5hbWU6IGNvbnN1bGRucy11ZHAKICAgIHByb3RvY29sOiAiVURQIgogICAgcG9ydDoge3suVmFsdWVzLkNvbnN1bERuc1BvcnR9fQogIGNsdXN0ZXJJUDogTm9uZQogIHNlbGVjdG9yOgogICAgY29tcG9uZW50OiAie3sgLlJlbGVhc2UuTmFtZSB9fS17eyAuVmFsdWVzLkNvbXBvbmVudCB9fSIK"
	      },
	      {
		"filePath": "templates/consul-statefulset.yaml",
		"fileContents": ""
	      },
	      {
		"filePath": "templates/consul-test-clusterrole.yaml",
		"fileContents": "e3stIGlmIC5WYWx1ZXMudGVzdC5yYmFjLmNyZWF0ZSB9fQphcGlWZXJzaW9uOiByYmFjLmF1dGhvcml6YXRpb24uazhzLmlvL3YxYmV0YTEKa2luZDogQ2x1c3RlclJvbGUKbWV0YWRhdGE6CiAgbGFiZWxzOgogICAgYXBwOiB7eyB0ZW1wbGF0ZSAiY29uc3VsLm5hbWUiIC4gfX0KICAgIGNoYXJ0OiB7eyB0ZW1wbGF0ZSAiY29uc3VsLmNoYXJ0IiAuIH19CiAgICBoZXJpdGFnZToge3sgLlJlbGVhc2UuU2VydmljZSB9fQogICAgcmVsZWFzZToge3sgLlJlbGVhc2UuTmFtZSB9fQogIG5hbWU6IHt7IHRlbXBsYXRlICJjb25zdWwuZnVsbG5hbWUiIC4gfX0tdGVzdApydWxlczoKLSBhcGlHcm91cHM6IFsiIl0KICByZXNvdXJjZXM6IFsicG9kcyIsICJwb2RzL2xvZyJdCiAgdmVyYnM6IFsiZ2V0IiwgImxpc3QiXQotIGFwaUdyb3VwczogWyIiXQogIHJlc291cmNlczogWyJwb2RzL2V4ZWMiXQogIHZlcmJzOiBbImNyZWF0ZSJdCnt7LSBlbmQgfX0K"
	      },
	      {
		"filePath": "templates/consul-test-clusterrolebinding.yaml",
		"fileContents": "e3stIGlmIC5WYWx1ZXMudGVzdC5yYmFjLmNyZWF0ZSB9fQphcGlWZXJzaW9uOiByYmFjLmF1dGhvcml6YXRpb24uazhzLmlvL3YxYmV0YTEKa2luZDogQ2x1c3RlclJvbGVCaW5kaW5nCm1ldGFkYXRhOgogIGxhYmVsczoKICAgIGFwcDoge3sgdGVtcGxhdGUgImNvbnN1bC5uYW1lIiAuIH19CiAgICBjaGFydDoge3sgdGVtcGxhdGUgImNvbnN1bC5jaGFydCIgLiB9fQogICAgaGVyaXRhZ2U6IHt7IC5SZWxlYXNlLlNlcnZpY2UgfX0KICAgIHJlbGVhc2U6IHt7IC5SZWxlYXNlLk5hbWUgfX0KICBuYW1lOiB7eyB0ZW1wbGF0ZSAiY29uc3VsLmZ1bGxuYW1lIiAuIH19LXRlc3QKc3ViamVjdHM6CiAgLSBraW5kOiBTZXJ2aWNlQWNjb3VudAogICAgbmFtZToge3sgdGVtcGxhdGUgImNvbnN1bC5mdWxsbmFtZSIgLiB9fS10ZXN0CiAgICBuYW1lc3BhY2U6IHt7IC5SZWxlYXNlLk5hbWVzcGFjZSB9fQpyb2xlUmVmOgogIGFwaUdyb3VwOiByYmFjLmF1dGhvcml6YXRpb24uazhzLmlvCiAga2luZDogQ2x1c3RlclJvbGUKICBuYW1lOiB7eyB0ZW1wbGF0ZSAiY29uc3VsLmZ1bGxuYW1lIiAuIH19LXRlc3QKe3stIGVuZCB9fQo="
	      },
	      {
		"filePath": "templates/consul-test-serviceaccount.yaml",
		"fileContents": "e3stIGlmIC5WYWx1ZXMudGVzdC5yYmFjLmNyZWF0ZSB9fQphcGlWZXJzaW9uOiB2MQpraW5kOiBTZXJ2aWNlQWNjb3VudAptZXRhZGF0YToKICBsYWJlbHM6CiAgICBhcHA6IHt7IHRlbXBsYXRlICJjb25zdWwubmFtZSIgLiB9fQogICAgY2hhcnQ6IHt7IHRlbXBsYXRlICJjb25zdWwuY2hhcnQiIC4gfX0KICAgIGhlcml0YWdlOiB7eyAuUmVsZWFzZS5TZXJ2aWNlIH19CiAgICByZWxlYXNlOiB7eyAuUmVsZWFzZS5OYW1lIH19CiAgbmFtZToge3sgdGVtcGxhdGUgImNvbnN1bC5mdWxsbmFtZSIgLiB9fS10ZXN0Cnt7LSBlbmQgfX0K"
	      },
	      {
		"filePath": "templates/consul-test.yaml",
		"fileContents": "YXBpVmVyc2lvbjogdjEKa2luZDogUG9kCm1ldGFkYXRhOgogIG5hbWU6ICJ7eyAuUmVsZWFzZS5OYW1lIH19LXVpLXRlc3Qte3sgcmFuZEFscGhhTnVtIDUgfCBsb3dlciB9fSIKICBhbm5vdGF0aW9uczoKICAgICJoZWxtLnNoL2hvb2siOiB0ZXN0LXN1Y2Nlc3MKc3BlYzoKICB7ey0gaWYgb3IgLlZhbHVlcy50ZXN0LnJiYWMuY3JlYXRlIC5WYWx1ZXMudGVzdC5yYmFjLnNlcnZpY2VBY2NvdW50TmFtZSB9fQogIHNlcnZpY2VBY2NvdW50TmFtZToge3sgaWYgLlZhbHVlcy50ZXN0LnJiYWMuY3JlYXRlIH19e3sgdGVtcGxhdGUgImNvbnN1bC5mdWxsbmFtZSIgLiB9fS10ZXN0e3sgZWxzZSB9fSJ7eyAuVmFsdWVzLnRlc3QucmJhYy5zZXJ2aWNlQWNjb3VudE5hbWUgfX0ie3sgZW5kIH19CiAge3stIGVuZCB9fQogIGluaXRDb250YWluZXJzOgogICAgLSBuYW1lOiB0ZXN0LWZyYW1ld29yawogICAgICBpbWFnZTogZGR1cG9ydGFsL2JhdHM6MC40LjAKICAgICAgY29tbWFuZDoKICAgICAgLSAiYmFzaCIKICAgICAgLSAiLWMiCiAgICAgIC0gfAogICAgICAgIHNldCAtZXgKICAgICAgICAjIGNvcHkgYmF0cyB0byB0b29scyBkaXIKICAgICAgICBjcCAtUiAvdXNyL2xvY2FsL2xpYmV4ZWMvIC90b29scy9iYXRzLwogICAgICB2b2x1bWVNb3VudHM6CiAgICAgIC0gbW91bnRQYXRoOiAvdG9vbHMKICAgICAgICBuYW1lOiB0b29scwogIGNvbnRhaW5lcnM6CiAgICAtIG5hbWU6IHt7IC5SZWxlYXNlLk5hbWUgfX0tdWktdGVzdAogICAgICBpbWFnZToge3sgLlZhbHVlcy50ZXN0LmltYWdlIH19Ont7IC5WYWx1ZXMudGVzdC5pbWFnZVRhZyB9fQogICAgICBjb21tYW5kOiBbIi90b29scy9iYXRzL2JhdHMiLCAiLXQiLCAiL3Rlc3RzL3J1bi5zaCJdCiAgICAgIHZvbHVtZU1vdW50czoKICAgICAgLSBtb3VudFBhdGg6IC90ZXN0cwogICAgICAgIG5hbWU6IHRlc3RzCiAgICAgICAgcmVhZE9ubHk6IHRydWUKICAgICAgLSBtb3VudFBhdGg6IC90b29scwogICAgICAgIG5hbWU6IHRvb2xzCiAgdm9sdW1lczoKICAtIG5hbWU6IHRlc3RzCiAgICBjb25maWdNYXA6CiAgICAgIG5hbWU6IHt7IHRlbXBsYXRlICJjb25zdWwuZnVsbG5hbWUiIC4gfX0tdGVzdHMKICAtIG5hbWU6IHRvb2xzCiAgICBlbXB0eURpcjoge30KICByZXN0YXJ0UG9saWN5OiBOZXZlcgo="
	      },
	      {
		"filePath": "templates/gossip-secret.yaml",
		"fileContents": "e3sgaWYgLlZhbHVlcy5Hb3NzaXAuQ3JlYXRlIH19CmFwaVZlcnNpb246IHYxCmtpbmQ6IFNlY3JldAptZXRhZGF0YToKICBuYW1lOiB7eyB0ZW1wbGF0ZSAiY29uc3VsLmZ1bGxuYW1lIiAuIH19LWdvc3NpcC1rZXkKICBsYWJlbHM6CiAgICBoZXJpdGFnZToge3sgLlJlbGVhc2UuU2VydmljZSB8IHF1b3RlIH19CiAgICByZWxlYXNlOiB7eyAuUmVsZWFzZS5OYW1lIHwgcXVvdGUgfX0KICAgIGNoYXJ0OiB7eyB0ZW1wbGF0ZSAiY29uc3VsLmNoYXJ0IiAuIH19CiAgICBjb21wb25lbnQ6ICJ7eyAuUmVsZWFzZS5OYW1lIH19LXt7IC5WYWx1ZXMuQ29tcG9uZW50IH19Igp0eXBlOiBPcGFxdWUKZGF0YToKICB7eyBpZiAuVmFsdWVzLkdvc3NpcEtleSB9fQogIGdvc3NpcC1rZXk6IHt7IC5WYWx1ZXMuR29zc2lwS2V5IHwgYjY0ZW5jIH19CiAge3sgZWxzZSB9fQogIGdvc3NpcC1rZXk6IHt7IHJhbmRBbHBoYU51bSAyNCB8IGI2NGVuYyB9fQogIHt7IGVuZCB9fQp7eyBlbmQgfX0K"
	      },
	      {
		"filePath": "templates/pod-dist-budget.yaml",
		"fileContents": "e3stIGlmIC5WYWx1ZXMubWF4VW5hdmFpbGFibGUgfX0KYXBpVmVyc2lvbjogcG9saWN5L3YxYmV0YTEKa2luZDogUG9kRGlzcnVwdGlvbkJ1ZGdldAptZXRhZGF0YToKICBuYW1lOiAie3sgdGVtcGxhdGUgImNvbnN1bC5mdWxsbmFtZSIgLiB9fS1wZGIiCiAgbGFiZWxzOgogICAgaGVyaXRhZ2U6IHt7IC5SZWxlYXNlLlNlcnZpY2UgfCBxdW90ZSB9fQogICAgcmVsZWFzZToge3sgLlJlbGVhc2UuTmFtZSB8IHF1b3RlIH19CiAgICBjaGFydDoge3sgdGVtcGxhdGUgImNvbnN1bC5jaGFydCIgLiB9fQogICAgY29tcG9uZW50OiAie3sgLlJlbGVhc2UuTmFtZSB9fS17eyAuVmFsdWVzLkNvbXBvbmVudCB9fSIKc3BlYzoKICBtYXhVbmF2YWlsYWJsZToge3sgLlZhbHVlcy5tYXhVbmF2YWlsYWJsZSB9fQogIHNlbGVjdG9yOgogICAgbWF0Y2hMYWJlbHM6CiAgICAgIGNvbXBvbmVudDogInt7IC5SZWxlYXNlLk5hbWUgfX0te3sgLlZhbHVlcy5Db21wb25lbnQgfX0iCnt7LSBlbmQgfX0K"
	      },
	      {
		"filePath": "templates/test-config.yaml",
		"fileContents": "YXBpVmVyc2lvbjogdjEKa2luZDogQ29uZmlnTWFwCm1ldGFkYXRhOgogIG5hbWU6IHt7IHRlbXBsYXRlICJjb25zdWwuZnVsbG5hbWUiIC4gfX0tdGVzdHMKZGF0YToKICBydW4uc2g6IHwtCiAgICBAdGVzdCAiVGVzdGluZyBDb25zdWwgY2x1c3RlciBoYXMgcXVvcnVtIiB7CiAgICAgIGZvciBpIGluIHswLi4yfTsgZG8KICAgICAgICBmb3IgbiBpbiB7MS4uMzB9OyBkbwogICAgICAgICAgaWYgWyBga3ViZWN0bCBleGVjIHt7IHRlbXBsYXRlICJjb25zdWwuZnVsbG5hbWUiIC4gfX0tJGkgY29uc3VsIG1lbWJlcnMgLS1uYW1lc3BhY2U9e3sgLlJlbGVhc2UuTmFtZXNwYWNlIH19IHwgZ3JlcCBzZXJ2ZXIgfCB3YyAtbGAgLWdlICIzIiBdOyB0aGVuCiAgICAgICAgICAgIGVjaG8gInt7IHRlbXBsYXRlICJjb25zdWwuZnVsbG5hbWUiIC4gfX0tJGkgT0suIGNvbnN1bCBtZW1iZXJzIHJldHVybmluZyBhdCBsZWFzdCAzIHJlY29yZHMuIgogICAgICAgICAgICBicmVhawogICAgICAgICAgZWxzZQogICAgICAgICAgICBlY2hvICJ7eyB0ZW1wbGF0ZSAiY29uc3VsLmZ1bGxuYW1lIiAuIH19LSRpIEVSUk9SLiBjb25zdWwgbWVtYmVycyByZXR1cm5pbmcgbGVzcyB0aGFuIDMgcmVjb3Jkcy4iCiAgICAgICAgICBmaQoKICAgICAgICAgIGlmIFsgIiRuIiAtZ2UgIjMwIiBdOyB0aGVuCiAgICAgICAgICAgIGVjaG8gIkZhaWxlZCAkbiB0aW1lcyB0byBnZXQgbWVtYmVycyBmcm9tIHt7IHRlbXBsYXRlICJjb25zdWwuZnVsbG5hbWUiIC4gfX0tJGkiCiAgICAgICAgICAgIGV4aXQgMQogICAgICAgICAgZmkKICAgICAgICAgIHNsZWVwIDEwCiAgICAgICAgZG9uZQogICAgICBkb25lCiAgICB9Cg=="
	      },
	      {
		"filePath": "templates/ui-service.yaml",
		"fileContents": "e3stIGlmIC5WYWx1ZXMudWlTZXJ2aWNlLmVuYWJsZWQgfX0KYXBpVmVyc2lvbjogdjEKa2luZDogU2VydmljZQptZXRhZGF0YToKICBuYW1lOiAie3sgdGVtcGxhdGUgImNvbnN1bC5mdWxsbmFtZSIgLiB9fS11aSIKe3stIHdpdGggLlZhbHVlcy51aVNlcnZpY2UuYW5ub3RhdGlvbnMgfX0KICBhbm5vdGF0aW9uczoKe3sgdG9ZYW1sIC4gfCBpbmRlbnQgNCB9fQp7ey0gZW5kIH19CiAgbGFiZWxzOgogICAgaGVyaXRhZ2U6IHt7IC5SZWxlYXNlLlNlcnZpY2UgfCBxdW90ZSB9fQogICAgcmVsZWFzZToge3sgLlJlbGVhc2UuTmFtZSB8IHF1b3RlIH19CiAgICBjaGFydDoge3sgdGVtcGxhdGUgImNvbnN1bC5jaGFydCIgLiB9fQogICAgY29tcG9uZW50OiAie3sgLlJlbGVhc2UuTmFtZSB9fS17eyAuVmFsdWVzLkNvbXBvbmVudCB9fSIKc3BlYzoKICBwb3J0czoKICAtIG5hbWU6IGh0dHAKICAgIHBvcnQ6IHt7IC5WYWx1ZXMuSHR0cFBvcnQgfX0KICBzZWxlY3RvcjoKICAgIGNvbXBvbmVudDogInt7IC5SZWxlYXNlLk5hbWUgfX0te3sgLlZhbHVlcy5Db21wb25lbnQgfX0iCiAgdHlwZTogInt7IC5WYWx1ZXMudWlTZXJ2aWNlLnR5cGUgfX0iCnt7LSBlbmQgfX0K"
	      },
	      {
		"filePath": "values.yaml",
		"fileContents": "IyBEZWZhdWx0IHZhbHVlcyBmb3IgY29uc3VsLgojIFRoaXMgaXMgYSBZQU1MLWZvcm1hdHRlZCBmaWxlLgojIERlY2xhcmUgbmFtZS92YWx1ZSBwYWlycyB0byBiZSBwYXNzZWQgaW50byB5b3VyIHRlbXBsYXRlcy4KIyBuYW1lOiB2YWx1ZQoKIyMgQ29uc3VsIHNlcnZpY2UgcG9ydHMKSHR0cFBvcnQ6IDg1MDAKUnBjUG9ydDogODQwMApTZXJmbGFuUG9ydDogODMwMQpTZXJmbGFuVWRwUG9ydDogODMwMQpTZXJmd2FuUG9ydDogODMwMgpTZXJmd2FuVWRwUG9ydDogODMwMgpTZXJ2ZXJQb3J0OiA4MzAwCkNvbnN1bERuc1BvcnQ6IDg2MDAKCiMjIFNwZWNpZnkgdGhlIGRvbWFpbiB3aXRoIHdoaWNoIGNvbnN1bCBzaG91bGQgcnVuIHdpdGgKIyMgVGhpcyB3aWxsIGJlIHBhc3NlZCBhcyBhIC1kb21haW4gcGFyYW1ldGVyCkRvbWFpbjogY29uc3VsCgojIyBVc2VkIGFzIHNlbGVjdG9yCkNvbXBvbmVudDogImNvbnN1bCIKUmVwbGljYXM6IDMKSW1hZ2U6ICJjb25zdWwiCkltYWdlVGFnOiAiMS4wLjAiCkltYWdlUHVsbFBvbGljeTogIkFsd2F5cyIKUmVzb3VyY2VzOiB7fQogIyByZXF1ZXN0czoKICMgICBjcHU6ICIxMDBtIgogIyAgIG1lbW9yeTogIjI1Nk1pIgogIyBsaW1pdHM6CiAjICAgY3B1OiAiNTAwbSIKICMgICBtZW1vcnk6ICI1MTJNaSIKIyMgUGVyc2lzdGVudCB2b2x1bWUgc2l6ZQoKcHJpb3JpdHlDbGFzc05hbWU6ICIiCgpTdG9yYWdlOiAiMUdpIgoKIyMgTmVlZGVkIGZvciAwLjguMCBhbmQgbGF0ZXIgSUYgYWxsIGNvbnN1bCBjb250YWluZXJzIGFyZSBzcHVuIHVwCiMjIG9uIHRoZSBzYW1lIG1hY2hpbmUuIFdpdGhvdXQgdGhpcyB0aGV5IGFsbCBnZW5lcmF0ZSB0aGUgc2FtZQojIyBob3N0IGlkLgpEaXNhYmxlSG9zdE5vZGVJZDogZmFsc2UKCiMjIERhdGFjZW50ZXIgbmFtZSBmb3IgY29uc3VsLiBJZiBub3Qgc3VwcGxpZWQsIHdpbGwgdXNlIHRoZSBjb25zdWwKIyMgZGVmYXVsdCAnZGMxJwojIERhdGFjZW50ZXJOYW1lOiBkYzEKCiMjIEVuY3J5cHQgR29zc2lwIFRyYWZmaWMKR29zc2lwOgogIEVuY3J5cHQ6IHRydWUKICBDcmVhdGU6IHRydWUKCiMjIHByZWRlZmluZWQgdmFsdWUgZm9yIGdvc3NpcCBrZXkuCiMjIFdpbGwgdXNlIGEgZ2VuZXJhdGVkIHJhbmRvbSBhbHBoYSBudW1lcmljIGlmIG5vdCBwcm92aWRlZAojIEdvc3NpcEtleToga2V5CgojIyBjb25zdWwgZGF0YSBQZXJzaXN0ZW50IFZvbHVtZSBTdG9yYWdlIENsYXNzCiMjIElmIGRlZmluZWQsIFN0b3JhZ2VDbGFzc05hbWU6IDxzdG9yYWdlQ2xhc3M+CiMjIElmIHNldCB0byAiLSIsIFN0b3JhZ2VDbGFzc05hbWU6ICIiLCB3aGljaCBkaXNhYmxlcyBkeW5hbWljIHByb3Zpc2lvbmluZwojIyBJZiB1bmRlZmluZWQgKHRoZSBkZWZhdWx0KSBvciBzZXQgdG8gbnVsbCwgbm8gc3RvcmFnZUNsYXNzTmFtZSBzcGVjIGlzCiMjICAgc2V0LCBjaG9vc2luZyB0aGUgZGVmYXVsdCBwcm92aXNpb25lci4gIChncDIgb24gQVdTLCBzdGFuZGFyZCBvbgojIyAgIEdLRSwgQVdTICYgT3BlblN0YWNrKQojIwojIFN0b3JhZ2VDbGFzczogIi0iCgojIyBTZXR0aW5nIG1heFVuYXZhaWxhYmxlIHdpbGwgY3JlYXRlIGEgcG9kIGRpc3J1cHRpb24gYnVkZ2V0IHRoYXQgd2lsbCBwcmV2ZW50CiMjIHZvbHVudGFydHkgY2x1c3RlciBhZG1pbmlzdHJhdGlvbiBmcm9tIHRha2luZyBkb3duIHRvbyBtYW55IGNvbnN1bCBwb2RzLiBJZgojIyB5b3Ugc2V0IG1heFVuYXZhaWxhYmxlLCB5b3Ugc2hvdWxkIHNldCBpdCB0byBjZWlsKChuLzIpIC0gMSksIHdoZXJlCiMjIG4gPSBSZXBsaWNhcy4gRm9yIGV4YW1wbGUsIGlmIHlvdSBoYXZlIDUgb3IgNiBSZXBsaWNhcywgeW91J2xsIHdhbnQgdG8gc2V0CiMjIG1heFVuYXZhaWxhYmxlID0gMi4gSWYgeW91IGFyZSB1c2luZyB0aGUgZGVmYXVsdCBvZiAzIFJlcGxpY2FzLCB5b3UnbGwgd2FudAojIyB0byBzZXQgbWF4VW5hdmFpbGFibGUgdG8gMS4KbWF4VW5hdmFpbGFibGU6IDEKCiMjIG5vZGVBZmZpbml0eSBzZXR0aW5ncwojIG5vZGVBZmZpbml0eToKIyAgIHJlcXVpcmVkRHVyaW5nU2NoZWR1bGluZ0lnbm9yZWREdXJpbmdFeGVjdXRpb246CiMgICAgIG5vZGVTZWxlY3RvclRlcm1zOgojICAgICAtIG1hdGNoRXhwcmVzc2lvbnM6CiMgICAgICAgLSBrZXk6IGNsb3VkLmdvb2dsZS5jb20vZ2tlLXByZWVtcHRpYmxlCiMgICAgICAgICBvcGVyYXRvcjogTm90SW4KIyAgICAgICAgIHZhbHVlczoKIyAgICAgICAgIC0gdHJ1ZQoKIyMgQWZmaW5pdHkgc2V0dGluZ3MKYWZmaW5pdHk6IHwKICBwb2RBbnRpQWZmaW5pdHk6CiAgICBwcmVmZXJyZWREdXJpbmdTY2hlZHVsaW5nSWdub3JlZER1cmluZ0V4ZWN1dGlvbjoKICAgIC0gd2VpZ2h0OiAxCiAgICAgIHBvZEFmZmluaXR5VGVybToKICAgICAgICB0b3BvbG9neUtleToga3ViZXJuZXRlcy5pby9ob3N0bmFtZQogICAgICAgIGxhYmVsU2VsZWN0b3I6CiAgICAgICAgICBtYXRjaEV4cHJlc3Npb25zOgogICAgICAgICAgLSBrZXk6IGNvbXBvbmVudAogICAgICAgICAgICBvcGVyYXRvcjogSW4KICAgICAgICAgICAgdmFsdWVzOgogICAgICAgICAgICAtICJ7eyAuUmVsZWFzZS5OYW1lIH19LXt7IC5WYWx1ZXMuQ29tcG9uZW50IH19IgoKIyMgRW5hYmxlIENvbnN1bCBXZWIgVUkKIyMKdWk6CiAgZW5hYmxlZDogdHJ1ZQojIyBDcmVhdGUgZGVkaWNhdGVkIFVJIHNlcnZpY2UKIyMKdWlTZXJ2aWNlOgogIGVuYWJsZWQ6IHRydWUKICB0eXBlOiAiTm9kZVBvcnQiCiAgYW5ub3RhdGlvbnM6IHt9CgpDb25zdWxDb25maWc6IFtdCiMgIC0gdHlwZTogc2VjcmV0CiMgICAgbmFtZTogY29uc3VsLWRlZmF1bHRzCiMgIC0gdHlwZTogY29uZmlnTWFwCiMgICAgbmFtZTogY29uc3VsLWRlZmF1bHRzCgojIyBDcmVhdGUgYW4gSW5ncmVzcyBmb3IgdGhlIFdlYiBVSQp1aUluZ3Jlc3M6CiAgZW5hYmxlZDogZmFsc2UKICBhbm5vdGF0aW9uczoge30KICBsYWJlbHM6IHt9CiAgaG9zdHM6IFtdCiAgdGxzOiB7fQoKIyMgVXNlZnVsIHdoZW4gQUNMcyBhcmUgZW5hYmxlZAphY2w6CiAgZW5hYmxlZDogZmFsc2UKICBtYXN0ZXJUb2tlbjogIiIKICBhZ2VudFRva2VuOiAiIgoKIyMgdGVzdCBjb250YWluZXIgZGV0YWlscwp0ZXN0OgogIGltYWdlOiBsYWNobGFuZXZlbnNvbi9rOHMta3ViZWN0bAogIGltYWdlVGFnOiB2MS40LjgtYmFzaAogIHJiYWM6CiAgICBjcmVhdGU6IGZhbHNlCiAgICBzZXJ2aWNlQWNjb3VudE5hbWU6ICIiCgpub2RlU2VsZWN0b3I6IHt9CnRvbGVyYXRpb25zOiBbXQphZGRpdGlvbmFsTGFiZWxzOiB7fQo="
	      }
	    ]
	  },
	  "shipVersion": {
	    "version": "0.46.1",
	    "buildTime": "2019-06-13T18:53:28Z",
	    "dependencies": {
	      "helm": "v2.14.1",
	      "kustomize": "v2.0.3",
	      "terraform": "v0.11.14"
	    }
	  },
	  "contentSHA": "cb37d4e3e71f42e9df51642a58cc0d2df002e2c3348eb76a0767cb3675d4664a",
	  "lifecycle": {
	    "stepsCompleted": {
	      "intro": true,
	      "kustomize": true,
	      "kustomize-intro": true,
	      "outro": true,
	      "render": true,
	      "values": true
	    }
	  }
	}
      }
`
